{"version":3,"sources":["annotator-madison.js","module.js","Annotation.js","App.js","Comment.js","DocumentPage.js","DocumentToc.js","EmailSubscribe.js","HomePage.js","Reader.js","UserNotifications.js","UserPage.js","DashboardDocuments.js","DashboardEditor.js","DashboardSettings.js","DashboardVerify.js","DashboardVerifyGroup.js","DashboardVerifyUser.js","Doc.js","AnnotationService.js","CreateLoginPopup.js","ModalService.js","UserService.js","diff-layout.js","ActivitySubComment.js","AnnotationItem.js","CommentItem.js","DocComments.js","DocLink.js","DocListItem.js","NgBlur.js","ProfileCompletionMessage.js","SubcommentLink.js","GetById.js","Gravatar.js","ParseDate.js","ToArray.js","annotationServiceGlobal.js","app.js","googletranslate.js"],"names":[],"mappingszfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbtohB7BA;AiBAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AjBTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AkBrzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AtB7EA;AuBAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A/BlCA;AgCAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzGA;AACA;AACA;AACA","file":"app.js","sourcesContent":["/*global Annotator*/\n/*global getAnnotationService*/\n/*global user*/\n/*global doc*/\n/*global diff_match_patch*/\nAnnotator.Plugin.Madison = function () {\n  Annotator.Plugin.apply(this, arguments);\n};\n\n$.extend(Annotator.Plugin.Madison.prototype, new Annotator.Plugin(), {\n  events: {},\n  options: {},\n  pluginInit: function () {\n\n    /**\n     *  Subscribe to Store's `annotationsLoaded` event\n     *    Stores all annotation objects provided by Store in the window\n     *    Adds all annotations to the sidebar\n     **/\n    this.annotator.subscribe('annotationsLoaded', function (annotations) {\n      annotations.forEach(function (annotation) {\n        annotation.highlights.forEach(function (highlight) {\n          $(highlight).attr('id', 'annotation_' + annotation.id);\n          $(highlight).attr('name', 'annotation_' + annotation.id);\n          annotation.link = 'annotation_' + annotation.id;\n        });\n      });\n\n      //Set the annotations in the annotationService\n      var annotationService = getAnnotationService();\n      annotationService.setAnnotations(annotations);\n    });\n\n    /**\n     *  Subscribe to Annotator's `annotationCreated` event\n     *    Adds new annotation to the sidebar\n     */\n    this.annotator.subscribe('annotationCreated', function (annotation) {\n      var annotationService = getAnnotationService();\n      annotationService.addAnnotation(annotation);\n      if ($.showAnnotationThanks) {\n        $('#annotationThanks').modal({\n          remote: _baseUrl + '/modals/annotation_thanks',\n          keyboard: true\n        });\n      }\n    });\n\n    this.annotator.subscribe('commentCreated', function (comment) {\n      comment = $('<div class=\"existing-comment\"><blockquote>' + comment.text + '<div class=\"comment-author\">' + comment.user.name + '</div></blockquote></div>');\n      var currentComments = $('#current-comments');\n      currentComments.append(comment);\n      currentComments.removeClass('hidden');\n\n      $('#current-comments').collapse(true);\n    });\n\n    this.annotator.subscribe('annotationViewerTextField', function (field, annotation) {\n      if(annotation.tags.length === 0){\n        return;\n      }\n\n      var showDiff = false;\n\n      annotation.tags.forEach(function (tag){\n        if(tag === 'editar'){\n          var jField = $(field);\n          var differ = new diff_match_patch();\n          var diffs = differ.diff_main(annotation.quote, annotation.text);\n          var html = differ.diff_prettyHtml(diffs);\n          jField.find('p').html(html);\n        }\n      });\n    });\n\n    //Add Madison-specific fields to the viewer when Annotator loads it\n    this.annotator.viewer.addField({\n      load: function (field, annotation) {\n        this.addNoteLink(field, annotation);\n        this.addNoteActions(field, annotation);\n        this.addComments(field, annotation);\n      }.bind(this)\n    });\n\n    this.annotator.editor.submit = function (e) {\n      //Clear previous errors\n      this.annotation._error = false;\n\n      var field, _i, _len, _ref;\n      Annotator.Util.preventEventDefault(e);\n\n      _ref = this.fields;\n\n      for (_i = 0, _len = _ref.length; _i < _len; _i++){\n        field = _ref[_i];\n        field.submit(field.element, this.annotation);\n      }\n\n      if(this.annotation._error !== true){\n        this.publish('save', [this.annotation]);\n\n        return this.hide();\n      }\n    };\n\n    errorNotification = function (message) {\n      Annotator.showNotification(message.replace(/<\\/?[^>]+(>|$)/g, \"\"),Annotator.Notification.ERROR);\n      feedbackMessage( message, 'error', '#participate-activity-message' );\n    }\n\n    this.annotator.editor.addField({\n      load: function (field, annotation) {\n        this.addEditFields(field, annotation);\n      }.bind(this),\n      submit: function(field, annotation) {\n        //check it is tagged 'edit'\n        if(this.hasEditTag(annotation.tags)){\n          //check we have explanatory content\n          var explanation = $(field).find('#explanation').val();\n\n          //If no explanatory content, show message and don't submit\n          if('' == explanation.trim()){\n            $('#annotation-error').text(\"Por favor explica por qué hiciste el cambio.\").toggle(true);\n\n            annotation._error = true;\n            return false;\n          }\n\n          annotation.explanation = explanation;\n        }\n      },\n      hasEditTag: function (tags) {\n        var hasEditTag = false;\n\n        if(tags === undefined || tags.length  === 0){\n          return false;\n        }\n\n        tags.forEach(function (tag) {\n          if (tag === 'editar') {\n            hasEditTag = true;\n          }\n        });\n\n        return hasEditTag;\n      }\n    });\n  },\n  addEditFields: function (field, annotation) {\n    var newField = $(field);\n    var toAdd = $('<div class=\"annotator-editor-edit-wrapper\"></div>');\n\n    var buttonGroup = $('<div class=\"btn-group\"></div>');\n\n    var explanation = $('<input id=\"explanation\" type=\"text\" name=\"explanation\" placeholder=\"¿Por qué editaste esto?\" style=\"display:none;\" />');\n    var annotationError = $('<p id=\"annotation-error\" style=\"display:none; color:red;\"></p>');\n\n    var annotateButton = $('<button type=\"button\" class=\"btn btn-default active\">Anotar</button>').click(function () {\n      $(this).addClass('active');\n      $(this).siblings().each(function (sibling) {\n        $(this).removeClass('active');\n      });\n      $('#annotator-field-0').val('');\n      $('#annotator-field-1').val('');\n      $('#explanation').toggle(false);\n      $('#explanation').prop('required', false);\n      $('#annotator-error').text('').toggle(false);\n      $('#annotator-field-0').focus();\n    });\n\n    var editButton = $('<button type=\"button\" class=\"btn btn-default\">Editar</button>').click(function () {\n      $(this).addClass('active');\n      $(this).siblings().each(function (sibling) {\n        $(this).removeClass('active');\n      });\n      $('#annotator-field-0').val(annotation.quote);\n      $('#annotator-field-1').val('editar');\n      $('#explanation').toggle(true);\n      $('#explanation').prop('required', true);\n      $('#annotator-field-0').focus();\n    });\n\n    buttonGroup.append(annotateButton, editButton);\n    toAdd.append(buttonGroup);\n    toAdd.append(explanation);\n    toAdd.append(annotationError);\n    newField.html(toAdd);\n  },\n  addComments: function (field, annotation) {\n    //Add comment wrapper and collapse the comment thread\n    var commentsHeader = $('<div class=\"comment-toggle\" data-toggle-\"collapse\" data-target=\"#current-comments\">Comentarios <span id=\"comment-caret\" class=\"caret caret-right\"></span></button>').click(function () {\n      $('#current-comments').collapse('toggle');\n      $('#comment-caret').toggleClass('caret-right');\n    });\n\n    //If there are no comments, hide the comment wrapper\n    if ($(annotation.comments).length === 0) {\n      commentsHeader.addClass('hidden');\n    }\n\n    //Add all current comments to the annotation viewer\n    var currentComments = $('<div id=\"current-comments\" class=\"current-comments collapse\"></div>');\n\n    /*jslint unparam: true*/\n    $.each(annotation.comments, function (index, comment) {\n      comment = $('<div class=\"existing-comment\"><blockquote>' + comment.text + '<div class=\"comment-author\">' + comment.user.name + '</div></blockquote></div>');\n      currentComments.append(comment);\n    });\n    /*jslint unparam: false*/\n\n    //Collapse the comment thread on load\n    currentComments.ready(function () {\n      $('#existing-comments').collapse({\n        toggle: false\n      });\n    });\n\n    //If the user is logged in, allow them to comment\n    if (user.id !== '' && doc.is_opened) {\n      var annotationComments = $('<div class=\"annotation-comments\"></div>');\n      var commentText = $('<input type=\"text\" class=\"form-control\" />');\n      var commentSubmit = $('<button type=\"button\" class=\"btn btn-primary\" >Enviar</button>');\n      commentSubmit.click(function () {\n        this.createComment(commentText, annotation);\n      }.bind(this));\n      annotationComments.append(commentText);\n\n      annotationComments.append(commentSubmit);\n\n      $(field).append(annotationComments);\n    }\n\n    $(field).append(commentsHeader, currentComments);\n  },\n  addNoteActions: function (field, annotation) {\n    //Add actions ( like / dislike / error) to annotation viewer\n    var annotationAction = $('<div></div>').addClass('annotation-action');\n    var generalAction = $('<span></span>').addClass('glyphicon').data('annotation-id', annotation.id);\n\n    var annotationLike = generalAction.clone().addClass('glyphicon-thumbs-up').append('<span class=\"action-count\">' + annotation.likes + '</span>');\n    var annotationDislike = generalAction.clone().addClass('glyphicon-thumbs-down').append('<span class=\"action-count\">' + annotation.dislikes + '</span>');\n    var annotationFlag = generalAction.clone().addClass('glyphicon-flag').append('<span class=\"action-count\">' + annotation.flags + '</span>');\n\n    annotationAction.append(annotationLike, annotationDislike, annotationFlag);\n\n    //If user is logged in add his current action and enable the action buttons\n    if (user.id !== '') {\n      if (annotation.user_action) {\n        if (annotation.user_action === 'like') {\n          annotationLike.addClass('selected');\n        } else if (annotation.user_action === 'dislike') {\n          annotationDislike.addClass('selected');\n        } else if (annotation.user_action === 'flag') {\n          annotationFlag.addClass('selected');\n        } // else this user doesn't have any actions on this annotation\n      }\n\n      var that = this;\n\n      annotationLike.addClass('logged-in').click(function () {\n        that.addLike(annotation, this);\n      });\n\n      annotationDislike.addClass('logged-in').click(function () {\n        that.addDislike(annotation, this);\n      });\n\n      annotationFlag.addClass('logged-in').click(function () {\n        that.addFlag(annotation, this);\n      });\n    }\n\n    $(field).append(annotationAction);\n  },\n  addNoteLink: function (field, annotation) {\n    //Add link to annotation\n    var noteLink = $('<div class=\"annotation-link\"></div>');\n    var linkPath = window.location.origin + window.location.pathname + '#' + annotation.link;\n    var annotationLink = $('<a></a>').attr('href', window.location.pathname + '#' + annotation.link).text('Copiar Enlace de Anotación').addClass('annotation-permalink');\n    annotationLink.attr('data-clipboard-text', linkPath);\n\n    var client = new ZeroClipboard(annotationLink);\n\n    noteLink.append(annotationLink);\n    $(field).append(noteLink);\n  },\n  createComment: function (textElement, annotation) {\n    var text = textElement.val();\n    textElement.val('');\n\n    var comment = {\n      text: text,\n      user: user\n    };\n\n    //POST request to add user's comment\n    $.post(_baseUrl + '/api/docs/' + doc.id + '/annotations/' + annotation.id + '/comments', {\n      comment: comment\n    }, function (data) {\n\n      if(data.status === 'error') {\n        message = '<b>Lo sentimos</b>, Este documento se encuentra cerrado';\n        return errorNotification(message);\n      }\n\n      annotation.comments.push(comment);\n\n      return this.annotator.publish('commentCreated', comment);\n    }.bind(this));\n  },\n  addLike: function (annotation, element) {\n    $.post(_baseUrl + '/api/docs/' + doc.id + '/annotations/' + annotation.id + '/likes', function (data) {\n      udm_( 'http://b.scorecardresearch.com/b?c1=2&c2=17183199&ns_site=gobmx&ns_type=hidden&ns_ui_type=clickin&name=consulta.documento.' + doc.slug + '.annotation_vote.' + annotation.id + '&action=like' );\n      element = $(element);\n      element.children('.action-count').text(data.likes);\n      element.siblings('.glyphicon').removeClass('selected');\n\n      if(typeof data.document_closed !== 'undefined'){\n        message = '<b>Lo sentimos</b>, Este documento se encuentra cerrado';\n        return errorNotification(message);\n      }\n\n      if (data.action) {\n        element.addClass('selected');\n      } else {\n        element.removeClass('selected');\n      }\n\n      element.siblings('.glyphicon-thumbs-up').children('.action-count').text(data.likes);\n      element.siblings('.glyphicon-thumbs-down').children('.action-count').text(data.dislikes);\n      element.siblings('.glyphicon-flag').children('.action-count').text(data.flags);\n\n      annotation.likes = data.likes;\n      annotation.dislikes = data.dislikes;\n      annotation.flags = data.flags;\n      annotation.user_action = 'like';\n    });\n  },\n  addDislike: function (annotation, element) {\n    $.post(_baseUrl + '/api/docs/' + doc.id + '/annotations/' + annotation.id + '/dislikes', function (data) {\n      udm_( 'http://b.scorecardresearch.com/b?c1=2&c2=17183199&ns_site=gobmx&ns_type=hidden&ns_ui_type=clickin&name=consulta.documento.' + doc.slug + '.annotation_vote.' + annotation.id + '&action=dislike' );\n      element = $(element);\n      element.children('.action-count').text(data.dislikes);\n      element.siblings('.glyphicon').removeClass('selected');\n\n      if(typeof data.document_closed !== 'undefined'){\n        message = '<b>Lo sentimos</b>, Este documento se encuentra cerrado';\n        return errorNotification(message);\n      }\n\n      if (data.action) {\n        element.addClass('selected');\n      } else {\n        element.removeClass('selected');\n      }\n\n      element.siblings('.glyphicon-thumbs-up').children('.action-count').text(data.likes);\n      element.siblings('.glyphicon-thumbs-down').children('.action-count').text(data.dislikes);\n      element.siblings('.glyphicon-flag').children('.action-count').text(data.flags);\n\n      annotation.likes = data.likes;\n      annotation.dislikes = data.dislikes;\n      annotation.flags = data.flags;\n      annotation.user_action = 'dislike';\n    });\n  },\n  addFlag: function (annotation, element) {\n    $.post(_baseUrl + '/api/docs/' + doc.id + '/annotations/' + annotation.id + '/flags', function (data) {\n      element = $(element);\n      element.children('.action-count').text(data.flags);\n      element.siblings('.glyphicon').removeClass('selected');\n\n      if(typeof data.document_closed !== 'undefined'){\n        message = '<b>Lo sentimos</b>, Este documento se encuentra cerrado';\n        return errorNotification(message);\n      }\n\n      if (data.action) {\n        element.addClass('selected');\n      } else {\n        element.removeClass('selected');\n      }\n\n      element.siblings('.glyphicon-thumbs-up').children('.action-count').text(data.likes);\n      element.siblings('.glyphicon-thumbs-down ').children('.action-count').text(data.dislikes);\n\n      annotation.likes = data.likes;\n      annotation.dislikes = data.dislikes;\n      annotation.flags = data.flags;\n      annotation.user_action = 'flag';\n    });\n  }\n});\n","angular.module( 'madisonApp.filters', []);","angular.module( 'madisonApp.controllers' )\n    .controller( 'AnnotationController', [ '$scope', '$sce', '$http', 'annotationService', 'createLoginPopup', 'growl', '$location', '$filter', '$timeout', function ( $scope, $sce, $http, annotationService, createLoginPopup, growl, $location, $filter, $timeout ) {\n        $scope.annotations  = [];\n        $scope.supported    = null;\n        $scope.opposed      = false;\n\n        //Parse sub-comment hash if there is one\n        var hash            = $location.hash();\n        var subCommentId    = hash.match( /^annsubcomment_([0-9]+)$/ );\n        if ( subCommentId ) {\n            $scope.subCommentId = subCommentId[1];\n        }\n\n        //Watch for annotationsUpdated broadcast\n        $scope.$on('annotationsUpdated', function () {\n            angular.forEach( annotationService.annotations, function ( annotation ) {\n                if ( $.inArray( annotation, $scope.annotations ) < 0 ) {\n                    var collapsed = true;\n                    if ( $scope.subCommentId ) {\n                        angular.forEach( annotation.comments, function ( subcomment ) {\n                            if ( subcomment.id == $scope.subCommentId ) {\n                                collapsed = false;\n                            }\n                        });\n                    }\n\n                    annotation.label                = 'annotation';\n                    annotation.commentsCollapsed    = collapsed;\n                    $scope.annotations.push( annotation );\n                }\n            });\n\n            $scope.$apply();\n        });\n\n        $scope.init             = function ( docId ) {\n            $scope.user = user;\n            $scope.doc  = doc;\n        };\n        $scope.isSponsor        = function () {\n            var currentId   = $scope.user.id;\n            var sponsored   = false;\n\n            angular.forEach( $scope.doc.sponsor, function ( sponsor ) {\n                if ( currentId === sponsor.id ) {\n                    sponsored = true;\n                }\n            });\n\n            return sponsored;\n        };\n        $scope.notifyAuthor     = function ( annotation ) {\n            $http.post( _baseUrl + '/api/docs/' + doc.id + '/annotations/' + annotation.id + '/' + 'seen' )\n                .success(function ( data ) {\n                    annotation.seen = data.seen;\n                }).error(function ( data ) {\n                    console.error( \"Unable to mark activity as seen: %o\", data );\n                });\n        };\n        $scope.getDocComments   = function ( docId ) {\n            $http({\n                method  : 'GET',\n                url     : _baseUrl + '/api/docs/' + docId + '/comments'\n            })\n            .success( function ( data ) {\n                angular.forEach( data, function ( comment ) {\n                    var collapsed = false;\n                    if ( $scope.subCommentId ) {\n                        angular.forEach( comment.comments, function ( subcomment ) {\n                            if ( subcomment.id == $scope.subCommentId ) {\n                                collapsed = false;\n                            }\n                        });\n                    }\n\n                    comment.commentsCollapsed   = collapsed;\n                    comment.label               = 'comment';\n                    comment.link                = 'comment_' + comment.id;\n                    $scope.annotations.push( comment );\n                });\n            })\n            .error( function ( data ) {\n                console.error( \"Error loading comments: %o\", data );\n            });\n        };\n        $scope.commentSubmit    = function () {\n            var comment     = angular.copy( $scope.comment );\n            comment.user    = $scope.user;\n            comment.doc     = $scope.doc;\n\n            $http.post( _baseUrl + '/api/docs/' + comment.doc.id + '/comments', {\n                'comment'   : comment\n                })\n                .success( function () {\n                    comment.label       = 'comment';\n                    comment.user.fname  = comment.user.name;\n                    $scope.stream.push( comment );\n                    $scope.comment.text = '';\n\n                    feedbackMessage( '<b>¡Gracias!</b> Acabas de agregar un comentario', 'success', '#participate-activity-message' );\n                })\n                .error( function ( data ) {\n                    console.error( \"Error posting comment: %o\", data );\n                });\n        };\n        $scope.activityOrder    = function ( activity ) {\n            var popularity  = activity.likes - activity.dislikes;\n\n            return popularity;\n        };\n        $scope.addAction        = function ( activity, action, $event ) {\n            if ( $scope.user.id !== '' ) {\n                $http.post( _baseUrl + '/api/docs/' + $scope.doc.id + '/' + activity.label + 's/' + activity.id + '/' + action )\n                    .success( function ( data ) {\n                        activity.likes      = data.likes;\n                        activity.dislikes   = data.dislikes;\n                        activity.flags      = data.flags;\n\n                        if(typeof data.document_closed !== 'undefined'){\n                          growl.error('Éste documento se encuentra cerrado');\n                        }\n                    }).error( function ( data ) {\n                        console.error( data );\n                    });\n            } else {\n              createLoginPopup($event);\n            }\n        };\n        $scope.collapseComments = function ( activity ) {\n            activity.commentsCollapsed  = !activity.commentsCollapsed;\n        };\n        $scope.subcommentSubmit = function ( activity, subcomment ) {\n            if ( $scope.user.id === '' ) {\n                var focused = document.activeElement;\n\n                if ( document.activeElement == document.body ) {\n                    pageY   = $( window ).scrollTop() + 300;\n                    clientX = $( window ).width() / 2 - 100;\n                } else {\n                    pageY   = $( focused ).offset().top;\n                    clientX = $( focused ).offset().left;\n                }\n\n                createLoginPopup( jQuery.Event( \"click\", {\n                    clientX : clientX,\n                    pageY   : pageY\n                }));\n                return;\n            }\n\n            subcomment.user = $scope.user;\n\n            $.post( _baseUrl + '/api/docs/' + $scope.doc.id + '/' + activity.label + 's/' + activity.id + '/comments', {\n                    'comment'   : subcomment\n                })\n                .success( function ( data ) {\n\n                    if(data.status === 'error') {\n                      growl.error('Éste documento se encuentra cerrado');\n                      return;\n                    }\n\n                    activity.comments.push( data );\n                    subcomment.text = '';\n                    subcomment.user = '';\n                    $scope.$apply();\n\n                    feedbackMessage( '<b>¡Gracias!</b> Acabas de agregar un comentario', 'success', '#participate-activity-message' );\n                }).error( function ( data ) {\n                    console.error( data );\n                });\n        };\n    }]);\n","angular.module('madisonApp.controllers')\n  .controller('AppController', ['$rootScope', '$scope', 'UserService', function ($rootScope, $scope, UserService) {\n    // Update page title\n    $rootScope.$on('$routeChangeSuccess', function (event, current, previous) {\n      $rootScope.pageTitle = current.$$route.title;\n    });\n\n    // Watch for user data change\n    $scope.$on('userUpdated', function () {\n      $scope.user = UserService.user;\n    });\n\n    // Load user data\n    UserService.getUser();\n  }]);\n","angular.module( 'madisonApp.controllers' )\n    .controller( 'CommentController', [ '$scope', '$sce', '$http', 'annotationService', 'createLoginPopup', 'growl', '$location', '$filter', '$timeout', function ( $scope, $sce, $http, annotationService, createLoginPopup, growl, $location, $filter, $timeout ) {\n        $scope.comments             = [];\n        $scope.supported            = null;\n        $scope.opposed              = false;\n        $scope.collapsed_comment    = {};\n\n      // Parse comment/subcomment direct links\n        var hash            = $location.hash();\n        var subCommentId    = hash.match( /(sub)?comment_([0-9]+)$/ );\n        if ( subCommentId ) {\n            $scope.subCommentId = subCommentId[2];\n        }\n\n        $scope.init             = function ( docId, disableAuthor, disableCommentAction ) {\n            $scope.getDocComments( docId );\n            $scope.user                 = user;\n            $scope.doc                  = doc;\n            $scope.disableAuthor        = ( typeof disableAuthor !== 'undefined' );\n            $scope.disableCommentAction = ( typeof disableCommentAction !== 'undefined' );\n            $scope.getLayoutTexts();\n        };\n        $scope.isSponsor        = function ( userId ) {\n            var currentId   = userId || $scope.user.id;\n            var sponsored   = false;\n\n            angular.forEach( $scope.doc.sponsor, function ( sponsor ) {\n                if ( currentId === sponsor.id ) {\n                    sponsored = true;\n                }\n            });\n\n            return sponsored;\n        };\n        $scope.notifyAuthor     = function ( activity ) {\n            // If the current user is a sponsor and the activity hasn't been seen yet,\n            // post to API route depending on comment/annotation label\n            $http.post(_baseUrl + '/api/docs/' + doc.id + '/' + 'comments/' + activity.id + '/' + 'seen' )\n                .success( function ( data ) {\n                    activity.seen = data.seen;\n                }).error( function ( data ) {\n                    console.error( \"Unable to mark activity as seen: %o\", data );\n                });\n        };\n        $scope.getLayoutTexts   = function() {\n            var texts = {\n                    common  : {\n                        header                      : '',\n                        callToAction                : '',\n                        commentLabel                : 'Agrega un comentario:',\n                        commentPlaceholder          : 'Agregar un comentario',\n                        subCommentPlaceholder       : 'Agregar un comentario',\n                        commentfeedbackMessage      : '<b>¡Gracias!</b> Acabas de agregar un comentario',\n                        subCommentfeedbackMessage   : '<b>¡Gracias!</b> Acabas de agregar un comentario',\n                        privateComment              : 'Comentario privado',\n                        sendComment                 : 'Enviar'\n                    },\n                    ieda    : {\n                        header                      : 'Categorías de Datos Abiertos propuestos',\n                        callToAction                : 'Vota por los conjuntos de datos que te interesan',\n                        commentLabel                : 'Sugiere otra categoría:',\n                        commentPlaceholder          : 'Sugiere otra categoría',\n                        subCommentPlaceholder       : 'Sugiere otro conjunto',\n                        commentfeedbackMessage      : '<b>¡Gracias!</b> Acabas de sugerir una categoría',\n                        subCommentfeedbackMessage   : '<b>¡Gracias!</b> Acabas de sugerir un conjunto de datos',\n                        privateComment              : 'Categoría privada',\n                        sendComment                 : 'Enviar'\n                    },\n                    planAGA : {\n                        header                      : 'Temas para el Tercer Plan de Acción de la Alianza para el Gobierno Abierto',\n                        callToAction                : 'Vota y comenta los temas que más te interesan.',\n                        commentLabel                : 'Sugiere otro tema:',\n                        commentPlaceholder          : 'Sugiere otro tema',\n                        subCommentPlaceholder       : 'Sugiere otro subtema',\n                        commentfeedbackMessage      : '<b>¡Gracias!</b> Acabas de sugerir un tema',\n                        subCommentfeedbackMessage   : '<b>¡Gracias!</b> Acabas de sugerir un subtema',\n                        privateComment              : 'Tema privado',\n                        sendComment                 : 'Enviar'\n                    },\n                    cofemer : {\n                        header                      : '',\n                        callToAction                : '',\n                        commentLabel                : 'Agrega tu comentario:',\n                        commentPlaceholder          : 'Agrega tu comentario',\n                        subCommentPlaceholder       : 'Agrega tu comentario',\n                        commentfeedbackMessage      : '<b>¡Gracias!</b> Acabas de agregar un comentario',\n                        subCommentfeedbackMessage   : '<b>¡Gracias!</b> Acabas de agregar un comentario',\n                        privateComment              : 'Comentario privado',\n                        sendComment                 : 'Enviar'\n                    }\n                };\n\n            $scope.layoutTexts  = texts.common;\n            angular.forEach( $scope.doc.doc_layouts, function ( category ) {\n                if ( texts[category.name] !== undefined )\n                    $scope.layoutTexts  = texts[category.name];\n            });\n        };\n        $scope.getDocComments   = function ( docId ) {\n            // Get all doc comments, regardless of nesting level\n            $http({\n                method  : 'GET',\n                url     : _baseUrl + '/api/docs/' + docId + '/comments'\n            })\n                .success( function ( data ) {\n                    // Build child-parent relationships for each comment\n                    angular.forEach( data, function ( comment ) {\n                        // If this isn't a parent comment, we need to find the parent and push this comment there\n                        if ( comment.parent_id !== null ) {\n                            var parent  = $scope.parentSearch( data, comment.parent_id );\n                            comment.parentpointer   = data[parent];\n                            data[parent].comments.push( comment );\n                        }\n\n                        // If this is the comment being linked to, save it\n                        if ( comment.id == $scope.subCommentId ) {\n                            $scope.collapsed_comment = comment;\n                        }\n\n                        comment.commentsCollapsed   = true;\n                        comment.label               = 'comment';\n                        comment.link                = 'comment_' + comment.id;\n\n                        // We only want to push top-level comments, they will include subcomments in their comments array(s)\n                        if ( comment.parent_id === null ) {\n                            $scope.comments.push( comment );\n                        }\n                    });\n\n                    // If we are linking directly to a comment, we need to expand comments\n                    if ( $scope.subCommentId ) {\n                        var not_parent = true;\n                        // Expand comments, moving up towards the parent, until all are expanded\n                        do {\n                            $scope.collapsed_comment.commentsCollapsed  = false;\n                            if ( $scope.collapsed_comment.parent_id !== null ) {\n                                $scope.collapsed_comment    = $scope.collapsed_comment.parentpointer;\n                            } else {\n                                // We have reached the first sublevel of comments, so set the top level\n                                // parent to expand and exit\n                                not_parent  = false;\n                            }\n                        } while ( not_parent === true );\n                    }\n                }).error( function ( data ) {\n                    console.error( \"Error loading comments: %o\", data );\n                });\n        };\n        $scope.parentSearch     = function ( arr, val ) {\n            for ( var i = 0; i < arr.length; i++ )\n                if ( arr[i].id === val )\n                    return i;\n                return false;\n        };\n        $scope.commentSubmit    = function () {\n            // Add comscore analytics\n            udm_( 'http://b.scorecardresearch.com/b?c1=2&c2=17183199&ns_site=gobmx&name=consulta.documento.' + $scope.doc.slug + '&ns_comment=' + $scope.comment );\n\n            var comment     = angular.copy( $scope.comment );\n            comment.user    = $scope.user;\n            comment.doc     = $scope.doc;\n\n            $http.post(_baseUrl + '/api/docs/' + comment.doc.id + '/comments', {\n                'comment': comment\n            })\n                .success( function ( data ) {\n\n                    data[0].label   = 'comment';\n                    $scope.comments.push( data[0] );\n                    $scope.comment.text = '';\n\n                    if(typeof data.document_closed !== 'undefined'){\n                      growl.error('Éste documento se encuentra cerrado');\n                      return;\n                    }\n\n                    feedbackMessage( $scope.layoutTexts.commentfeedbackMessage, 'success', '#participate-comment-message' );\n                })\n                .error( function ( data ) {\n                    console.error( \"Error posting comment: %o\", data );\n                });\n        };\n        $scope.activityOrder    = function ( activity ) {\n            var popularity  = activity.likes - activity.dislikes;\n\n            return popularity;\n        };\n        $scope.addAction        = function ( activity, action, $event ) {\n            if ( $scope.user.id !== '' ) {\n                if ( action == 'likes' || action == 'dislikes' ) {\n                    // Add comscore analytics\n                    var vote  = ( action == 'likes' ) ? 'up_vote' : 'down_vote';\n                    udm_( 'http://b.scorecardresearch.com/b?c1=2&c2=17183199&ns_site=gobmx&name=consulta.documento.' + $scope.doc.slug + '.comment_vote.' + activity.id + '&ns_vote=' + vote );\n                }\n\n                $http.post(_baseUrl + '/api/docs/' + $scope.doc.id + '/' + activity.label + 's/' + activity.id + '/' + action )\n                    .success( function ( data ) {\n                        activity.likes  = data.likes;\n                        activity.dislikes   = data.dislikes;\n                        activity.flags      = data.flags;\n                        activity.deleted_at = data.deleted_at;\n\n                        if(typeof data.document_closed !== 'undefined'){\n                          growl.error('Éste documento se encuentra cerrado');\n                        }\n                    }).error( function ( data ) {\n                        console.error( data );\n                    });\n            } else {\n              createLoginPopup($event);\n            }\n        };\n        $scope.collapseComments = function ( activity ) {\n            activity.commentsCollapsed = !activity.commentsCollapsed;\n        };\n        $scope.subcommentSubmit = function ( activity, subcomment ) {\n            // Add comscore analytics\n            udm_( 'http://b.scorecardresearch.com/b?c1=2&c2=17183199&ns_site=gobmx&ns_type=hidden&ns_ui_type=clickin&name=consulta.documento.' + $scope.doc.slug + '&subcomment_text=' + subcomment.text + '&subcomment_parent_id=' + subcomment.parent_id );\n\n            if ( $scope.user.id === '' ) {\n                var focused = document.activeElement;\n\n                if ( document.activeElement == document.body ) {\n                    pageY   = $( window ).scrollTop() + 300;\n                    clientX = $( window ).width() / 2 - 100;\n                } else {\n                    pageY   = $( focused ).offset().top;\n                    clientX = $( focused ).offset().left;\n                }\n\n                createLoginPopup( jQuery.Event( \"click\", {\n                    clientX : clientX,\n                    pageY   : pageY\n                }));\n                return;\n            }\n\n            subcomment.user = $scope.user;\n\n            $.post(_baseUrl + '/api/docs/' + $scope.doc.id + '/' + activity.label + 's/' + activity.id + '/comments', {\n                'comment': subcomment\n            })\n                .success( function ( data ) {\n                    data.comments   = [];\n                    data.label      = 'comment';\n                    activity.comments.push( data );\n                    subcomment.text = '';\n                    subcomment.user = '';\n                    $scope.$apply();\n\n                    feedbackMessage( $scope.layoutTexts.subCommentfeedbackMessage, 'success', '#participate-comment-message' );\n            }).error( function ( data ) {\n                console.error( data );\n            });\n        };\n    }]);\n","angular.module('madisonApp.controllers')\n  .controller('DocumentPageController', ['$scope', '$cookies', '$location', 'Doc', '$sce', function ($scope, $cookies, $location, Doc, $sce) {\n    $scope.hideIntro = $cookies.hideIntro;\n\n    // Check which tab needs to be active - if the location hash\n    // is #annsubcomment or there is no hash, the annotation/bill tab needs to be active\n    // Otherwise, the hash is #subcomment/#comment and the discussion tab should be active\n    var annotationHash = $location.hash().match(/^annsubcomment_([0-9]+)$/);\n    $scope.secondtab = false;\n    $scope.inlinediff = false;\n\n    if (!annotationHash && ($location.hash())) {\n      $scope.secondtab = true;\n    }\n\n    $scope.hideHowToAnnotate    = function () {\n      $cookies.hideIntro = true;\n      $scope.hideIntro   = true;\n    };\n\n    $scope.doc  = Doc.get({\n      id  : doc.id\n    }, function () {\n      //If intro text exists, convert & trust the markdown content\n      if(undefined !== $scope.doc.introtext[0]){\n          var converter    = new Markdown.Converter();\n          $scope.introtext = $sce.trustAsHtml(converter.makeHtml($scope.doc.introtext[0].meta_value));\n      }\n    });\n  }]);\n","angular.module( 'madisonApp.controllers' )\n    .controller( 'DocumentTocController', [ '$scope', function ( $scope ) {\n        $scope.headings = [];\n\n        // For now, we use the simplest possible method to render the TOC -\n        // just scraping the content.  We could use a real API callback here\n        // later if need be.  A huge stack of jQuery follows.\n        var headings    = $( '#doc_content' ).find( 'h1,h2,h3,h4,h5,h6' );\n\n        if( headings.length > 0 ) {\n            headings.each( function( i, elm ) {\n                elm = $( elm );\n                // Set an arbitrary id.\n                // TODO: use a better identifier here - preferably a title-based slug\n                if( !elm.attr( 'id' ) ) {\n                    elm.attr( 'id', 'heading-' + i );\n                }\n                elm.addClass( 'anchor' );\n                $scope.headings.push( {\n                    'title' : elm.text(),\n                    'tag'   : elm.prop( 'tagName' ),\n                    'link'  : elm.attr( 'id' )\n                });\n            });\n        } else {\n            $( '#toc-column' ).remove();\n            var container   = $( '#content' ).parent();\n            container.removeClass( 'col-md-6' );\n            container.addClass( 'col-md-9' );\n        }\n    }]);\n","angular.module('madisonApp.controllers')\n  .controller('EmailSubscribeController', ['$scope', '$http', function ($scope, $http) {\n    $scope.email = '';\n    $scope.successMessage = false;\n    $scope.subscribeEmail = function () {\n      $http.post('http://www.gob.mx/subscribe', { email: $scope.email })\n        .success(function (data) {\n          $scope.successMessage = true;\n        }).error(function (data) {\n          console.error( \"Unable to mark activity as seen: %o\", data );\n        });\n    };\n  }]);\n","angular.module('madisonApp.controllers')\n  .controller('HomePageController', ['$scope', '$location', '$http', '$filter', '$cookies', 'Doc', function ($scope, $location, $http, $filter, $cookies, Doc) {\n    var refEl     = $('.main-banner'),\n        search    = $location.search(),\n        page      = (search.page) ? search.page : 1,\n        limit     = (search.limit) ? search.limit : 20,\n        docSearch = (search.q) ? search.q : '';\n        docFilter = (search.mode) ? search.mode : '';\n        docOrder  = (search.date) ? search.date : '';\n\n    var fetchDocs = function() {\n      $scope.docs     = Array();\n      $scope.updating = true;\n\n      var params = {\n        q: docSearch,\n        filter: docFilter,\n        order: docOrder,\n        page: page,\n        per_page: limit\n      };\n\n      params = _.pick(params, function(value, key, object) {\n        return value !== '';\n      });\n\n      Doc.query(params, function (data) {\n        $scope.totalDocs = data.pagination.count;\n        $scope.perPage   = data.pagination.per_page;\n        $scope.page      = data.pagination.page;\n        $scope.updating  = false;\n        $scope.docs      = data.results;\n      }).$promise.catch(function (data) {\n        console.error(\"Unable to get documents: %o\", data);\n      });\n    };\n\n    $(function() {\n      $('#home-select2-filter').select2({\n        placeholder: \"Categoría, autor o estatus\",\n        allowClear: true\n      });\n      $('#home-select2-order').select2({\n        placeholder: \"Fecha\",\n        allowClear: true\n      });\n    });\n\n    $scope.docs      = [];\n    $scope.reverse   = true;\n    $scope.startStep = 0;\n    $scope.updating  = false;\n    $scope.docSearch = docSearch;\n    $scope.docFilter = docFilter;\n    $scope.docOrder  = docOrder;\n\n    $scope.paginate = function () {\n      if ($scope.page > 1) {\n        $location.search(\"page\", $scope.page);\n      } else {\n        $location.search(\"page\", null);\n      }\n\n      page = $scope.page;\n\n      // Scroll to the top of the list\n      $('html, body').animate({\n        scrollTop : refEl.offset().top + refEl.height()\n      }, 500 );\n\n      fetchDocs();\n    };\n\n    $scope.search = function () {\n      if ($scope.docSearch) {\n        $location.search(\"q\", $scope.docSearch);\n      } else {\n        $location.search(\"q\", null);\n      }\n\n      if ($scope.docFilter) {\n        $location.search(\"filter\", $scope.docFilter);\n      } else {\n        $location.search(\"filter\", null);\n      }\n\n      if ($scope.docOrder) {\n        $location.search(\"order\", $scope.docOrder);\n      } else {\n        $location.search(\"order\", null);\n      }\n\n      docSearch = $scope.docSearch;\n      docFilter = $scope.docFilter;\n      docOrder = $scope.docOrder;\n      fetchDocs();\n    };\n\n    // $scope.parseDocs = function (docs) {\n    //     angular.forEach(docs, function (doc) {\n    //         $scope.docs.unshift(doc);\n    //\n    //         angular.forEach(doc.dates, function (date) {\n    //             date.date = Date.parse(date.date);\n    //         });\n    //     });\n    // };\n\n    fetchDocs();\n  }]);\n","angular.module('madisonApp.controllers')\n  .controller('ReaderController', ['$scope', '$http', 'annotationService', 'createLoginPopup', '$timeout', '$anchorScroll', function ($scope, $http, annotationService, createLoginPopup, $timeout, $anchorScroll) {\n    var presentePlural = function(howMany) { return howMany == 1 ? '' : 'n'; };\n\n    var howManySupport = function(howMany, doesSupport) {\n      var verb = doesSupport ? ' apoya' : ' se opone';\n      return howMany + verb + presentePlural(howMany);\n    };\n\n    $scope.annotations = [];\n    $scope.$on('annotationsUpdated', function () {\n      $scope.annotations = annotationService.annotations;\n      $scope.$apply();\n\n      $timeout(function () {\n        $anchorScroll();\n      }, 0);\n    });\n\n    $scope.init         = function () {\n      $scope.user = user;\n      $scope.doc  = doc;\n      //$scope.setSponsor();\n      $scope.getSupported();\n\n      // Dates do not arrive in proper ISO 8601 format, e.g. 2015-01-14 03:27:04\n      // But by adding the T we get timezone +00:00, same as in the HomeController\n      // Then we parse it to get \"seconds since epoch\" which is needed by the date filter\n      $scope.doc.created_at = Date.parse($scope.doc.created_at.replace(' ', 'T'));\n      $scope.doc.updated_at = Date.parse($scope.doc.updated_at.replace(' ', 'T'));\n    };\n    $scope.setSponsor   = function () {\n      try {\n        if ($scope.doc.group_sponsor.length !== 0) {\n          $scope.doc.sponsor  = $scope.doc.group_sponsor;\n        } else {\n          $scope.doc.sponsor  = $scope.doc.user_sponsor;\n          $scope.doc.sponsor[0].display_name = $scope.doc.sponsor[0].fname + ' ' + $scope.doc.sponsor[0].lname;\n        }\n      } catch (err) {\n        console.error(err);\n      }\n    };\n    $scope.getSupported = function () {\n      if ($scope.user.id !== '') {\n      $http.get(_baseUrl + '/api/users/support/' + $scope.doc.id)\n        .success(function (data) {\n          switch (data.support) {\n            case \"1\":\n              $scope.supported    = true;\n              break;\n            case \"\":\n              $scope.opposed      = true;\n              break;\n            default:\n              $scope.supported    = null;\n              $scope.opposed      = null;\n          }\n\n          if ($scope.supported !== null && $scope.opposed !== null) {\n            $('#doc-support').text(howManySupport(data.supports, true));\n            $('#doc-oppose').text(howManySupport(data.opposes, false));\n          }\n        }).error(function () {\n          console.error(\"Unable to get support info for user %o and doc %o\", $scope.user, $scope.doc);\n        });\n      }\n    };\n    $scope.support = function (supported, $event) {\n      if ($scope.user.id === '') {\n        createLoginPopup($event);\n      } else {\n        // Add comscore analytics\n        var vote  = ( supported ) ? 'up_vote' : 'down_vote';\n        udm_( 'http://b.scorecardresearch.com/b?c1=2&c2=17183199&ns_site=gobmx&name=consulta.documento.' + $scope.doc.slug + '&ns_vote=' + vote );\n\n        $http.post(_baseUrl + '/api/users/support/' + $scope.doc.id, {\n          'support': supported\n        })\n        .success(function (data) {\n          //Parse data to see what user's action is currently\n          if (data.support === null) {\n            $scope.supported    = false;\n            $scope.opposed      = false;\n          } else {\n            $scope.supported    = data.support;\n            $scope.opposed      = !data.support;\n          }\n\n          var button      = $($event.target);\n          var otherButton = $($event.target).siblings('a.btn');\n\n          if (button.hasClass('doc-support')) {\n            button.text(howManySupport(data.supports, true));\n            otherButton.text(howManySupport(data.opposes, false));\n          } else {\n            button.text(howManySupport(data.opposes, false));\n            otherButton.text(howManySupport(data.supports, true));\n          }\n        })\n        .error(function (data) {\n          console.error(\"Error posting support: %o\", data);\n        });\n      }\n    };\n\n    $(document).ready(function () {\n      var annotator;\n      var popup;\n\n      $('.affix-elm').each(function(i, elm) {\n        elm = $(elm);\n        var elmtop = 0;\n        if(elm.data('offset-top')){\n          elmtop = elm.data('offset-top');\n        }\n        var elmbottom = 0;\n        if(elm.data('offset-bottom')){\n          elmbottom = elm.data('offset-bottom');\n        }\n\n        elm.affix({\n          offset: {\n            top: elmtop,\n            bottom: elmbottom\n          }\n        });\n      });\n\n      if (user.id === '') {\n\n        Annotator.prototype.checkForEndSelection = function (event) {\n\n          // This is what normally happens.\n          var container, range, _k, _len2, _ref1;\n          this.mouseIsDown = false;\n\n          if (this.ignoreMouseup || $('.popup').length) {\n            return;\n          }\n          this.selectedRanges = this.getSelectedRanges();\n          _ref1 = this.selectedRanges;\n          for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {\n            range = _ref1[_k];\n            container = range.commonAncestor;\n            if ($(container).hasClass(\"annotator-hl\")) {\n              container = $(container).parents(\"[class!=annotator-hl]\")[0];\n            }\n            if (this.isAnnotator(container)) {\n              return;\n            }\n          }\n          if (event && this.selectedRanges.length) {\n            // But we diverge from the norm here.\n\n            if (event !== null) {\n              event.preventDefault();\n            }\n\n            createLoginPopup(event);\n          }\n\n        };\n      }\n\n      annotator = $('#doc_content').annotator({\n        readOnly: !$scope.doc.is_opened\n      });\n\n      annotator.annotator('addPlugin', 'Unsupported');\n      annotator.annotator('addPlugin', 'Tags');\n      annotator.annotator('addPlugin', 'Markdown');\n      annotator.annotator('addPlugin', 'Store', {\n        annotationData: {\n          'uri': window.location.pathname,\n          'comments': []\n        },\n        prefix: _baseUrl + '/api/docs/' + doc.id + '/annotations',\n        urls: {\n          create: '',\n          read: '/:id',\n          update: '/:id',\n          destroy: '/:id',\n          search: '/search'\n        }\n      });\n\n      annotator.annotator('addPlugin', 'Permissions', {\n        user: user,\n        permissions: {\n          'read': [],\n          'update': [user.id],\n          'delete': [user.id],\n          'admin': [user.id]\n        },\n        showViewPermissionsCheckbox: false,\n        showEditPermissionsCheckbox: false,\n        userId: function (user) {\n          if (user && user.id) {\n            return user.id;\n          }\n\n          return user;\n        },\n        userString: function (user) {\n          if (user && user.name) {\n            return user.name;\n          }\n\n          return user;\n        }\n      });\n\n      annotator.annotator('addPlugin', 'Madison', {\n        userId: user.id\n      });\n    });\n  }]);\n","angular.module( 'madisonApp.controllers' )\n    .controller( 'UserNotificationsController', [ '$scope', '$http', 'UserService', function ( $scope, $http, UserService ) {\n        //Wait for AppController controller to load user\n        UserService.exists.then(function () {\n            $http.get( '/api/user/' + $scope.user.id + '/notifications' )\n                .success( function ( data ) {\n                    $scope.notifications    = data;\n                }).error( function ( data ) {\n                    console.error( \"Error loading notifications: %o\", data );\n                });\n        });\n\n        //Watch for notification changes\n        $scope.$watch( 'notifications', function ( newValue, oldValue ) {\n            if ( oldValue !== undefined ) {\n                //Save notifications\n                $http.put('/api/user/' + $scope.user.id + '/notifications', {\n                            notifications   : newValue\n                        })\n                    .success( function ( data ) {\n                        //Do nothing?\n                    }).error( function ( data ) {\n                        console.error( \"Error updating notification settings: %o\", data );\n                    });\n            }\n        }, true );\n    }]);","angular.module( 'madisonApp.controllers' )\n    .controller( 'UserPageController', [ '$scope', '$http', '$location', function ( $scope, $http, $location ) {\n        $scope.user         = {};\n        $scope.meta         = '';\n        $scope.docs         = [];\n        $scope.activities   = [];\n        $scope.verified     = false;\n\n        $scope.init             = function () {\n            $scope.getUser();\n        };\n        $scope.getUser          = function () {\n            var abs = $location.absUrl();\n            var id  = abs.match( /.*\\/(\\d+)$/ );\n            id      = id[1];\n\n            $http.get( '/api/user/' + id )\n                .success( function ( data ) {\n                    $scope.user = angular.copy( data );\n                    $scope.meta = angular.copy( data.user_meta );\n\n                    angular.forEach( data.docs, function ( doc ) {\n                        $scope.docs.push( doc );\n                    });\n                    angular.forEach( data.comments, function ( comment ) {\n                        comment.label   = 'comment';\n                        $scope.activities.push( comment );\n                    });\n                    angular.forEach( data.annotations, function ( annotation ) {\n                        annotation.label    = 'annotation';\n                        $scope.activities.push( annotation );\n                    });\n                    angular.forEach( $scope.user.user_meta, function ( meta ) {\n                        var cont = true;\n\n                        if ( meta.meta_key === 'verify' && meta.meta_value === 'verified' && cont ) {\n                            $scope.verified = true;\n                            cont = false;\n                        }\n                    });\n                }).error( function ( data ) {\n                    console.error( \"Unable to retrieve user: %o\", data );\n                });\n        };\n        $scope.showVerified     = function () {\n            if ( $scope.user.docs && $scope.user.docs.length > 0 ) {\n                return true;\n            }\n\n            return false;\n        };\n        $scope.activityOrder    = function ( activity ) {\n            return Date.parse( activity.created_at );\n        };\n    }]);","angular.module('madisonApp.dashboardControllers')\n    .controller('DashboardDocumentsController', ['$scope', '$http', '$filter', function ($scope, $http, $filter) {\n        $scope.docs         = [];\n        $scope.categories   = [];\n        $scope.sponsors     = [];\n        $scope.statuses     = [];\n        $scope.dates        = [];\n        $scope.dateSort     = '';\n        $scope.select2      = '';\n        $scope.docSort      = \"created_at\";\n        $scope.reverse      = true;\n\n        $scope.select2Config    = {\n            multiple    : true,\n            allowClear  : true,\n            placeholder : \"Filter documents by category, sponsor, or status\"\n        };\n        $scope.dateSortConfig   = {\n            allowClear  : true,\n            placeholder : \"Sort By Date\"\n        };\n\n        //Retrieve all docs\n        $http.get(_baseUrl + '/api/docs')\n            .success(function (data) {\n              $scope.parseDocs(data.results);\n            })\n            .error(function (data) {\n                console.error(\"Unable to get documents: %o\", data);\n            });\n        $scope.parseDocs    = function (docs) {\n            angular.forEach(docs, function ( doc) {\n                $scope.docs.push(doc);\n                $scope.parseDocMeta(doc.categories, 'categories');\n                $scope.parseDocMeta(doc.sponsor, 'sponsors');\n                $scope.parseDocMeta(doc.statuses, 'statuses');\n\n                angular.forEach(doc.dates, function (date) {\n                    date.date   = Date.parse(date.date);\n                });\n            });\n        };\n        $scope.parseDocMeta = function (collection, name) {\n            if (collection === undefined || collection.length === 0) {\n                return;\n            }\n\n            angular.forEach(collection, function ( item) {\n                var found = $filter('getById')($scope[name], item.id);\n\n                if (found === null) {\n                    switch (name) {\n                        case 'categories':\n                            $scope.categories.push(item);\n                            break;\n                        case 'sponsors':\n                            $scope.sponsors.push(item );\n                            break;\n                        case 'statuses':\n                            $scope.statuses.push(item);\n                            break;\n                        default:\n                            console.error('Unknown meta name: ' + name);\n                    }\n                }\n            });\n        };\n        $scope.docFilter    = function (doc) {\n            var show = false;\n\n            if ($scope.select2 !== undefined && $scope.select2 !== '') {\n                var cont    = true;\n                var select2 = $scope.select2.split('_');\n                var type    = select2[0];\n                var value   = parseInt(select2[1], 10);\n\n                switch ( type) {\n                    case 'category':\n                        angular.forEach(doc.categories, function (category) {\n                            if (   +category.id === value && cont) {\n                                show    = true;\n                                cont    = false;\n                            }\n                        });\n                        break;\n                    case 'sponsor':\n                        angular.forEach(doc.sponsor, function (sponsor) {\n                            if (+sponsor.id === value && cont) {\n                                show    = true;\n                                cont    = false;\n                            }\n                        });\n                        break;\n                    case 'status':\n                        angular.forEach(doc.statuses, function ( status) {\n                            if (+status.id === value && cont) {\n                                show    = true;\n                                cont    = false;\n                            }\n                        });\n                        break;\n                }\n            } else {\n                show    = true;\n            }\n\n            return show;\n        };\n    }]);\n","angular.module('madisonApp.dashboardControllers')\n    .controller('DashboardEditorController', [ '$scope', '$http', '$timeout', '$location', '$filter', 'growl', function ($scope, $http, $timeout, $location, $filter, growl) {\n        $scope.doc                  = {};\n        $scope.sponsor              = {};\n        $scope.group                = {};\n        $scope.status               = {};\n        $scope.newdate              = {\n            label   : '',\n            date    : new Date()\n        };\n        $scope.verifiedUsers        = [];\n        $scope.categories           = [0];\n        $scope.introtext            = \"\";\n        $scope.suggestedCategories  = [];\n        $scope.suggestedStatuses    = [];\n        $scope.suggestedGroups      = [];\n        $scope.dates                = [];\n\n        $scope.init             = function () {\n            var abs = $location.absUrl();\n            var id  = abs.match(/.*\\/(\\d+)$/)[1];\n            $scope.doc_id = id;\n\n            function clean_slug(string) {\n                return string.toLowerCase().replace(/[^a-zA-Z0-9\\- ]/g, '').replace(/ +/g, '-');\n            }\n\n            var docDone = $scope.getDoc(id);\n\n            $scope.getAllCategories();\n            $scope.getVerifiedUsers();\n            $scope.setSelectOptions();\n\n            var initCategories  = true;\n            var initIntroText   = true;\n            var initSponsor     = true;\n            var initStatus      = true;\n            var initGroup       = true;\n            var initTitle       = true;\n            var initSlug        = true;\n            var initContent     = true;\n\n            docDone.then(function () {\n                new Markdown.Editor(Markdown.getSanitizingConverter()).run();\n\n                // We don't control the pagedown CSS, and this DIV needs to be scrollable\n                $(\"#wmd-preview\").css(\"overflow\", \"scroll\");\n                // Resizing dynamically according to the textarea is hard, so just set the height once (22 is padding)\n                $(\"#wmd-preview\").css(\"height\", ($(\"#wmd-input\").height() + 22));\n                $(\"#wmd-input\").scroll(function () {\n                    $(\"#wmd-preview\").scrollTop($(\"#wmd-input\").scrollTop());\n                });\n\n                //Save intro text after a 3 second timeout\n                var introTextTimeout    = null;\n                $scope.updateIntroText  = function (newValue) {\n                    if(introTextTimeout) {\n                        $timeout.cancel(introTextTimeout);\n                    }\n                    introTextTimeout    = $timeout(function () {\n                        $scope.saveIntroText(newValue);\n                    }, 3000);\n                };\n\n                // $scope.getDocSponsor().then(function () {\n                //     $scope.$watch('sponsor', function () {\n                //         if (initSponsor) {\n                //             $timeout(function () {\n                //                 initSponsor = false;\n                //             });\n                //         } else {\n                //             $scope.saveSponsor();\n                //         }\n                //     });\n                // });\n                $scope.getDocStatus().then(function () {\n                    $scope.$watch('status', function () {\n                        if (initStatus) {\n                            $timeout(function () {\n                                initStatus  = false;\n                            });\n                        } else {\n                            $scope.saveStatus();\n                        }\n                    });\n                });\n                $scope.getDocGroup().then(function () {\n                    $scope.$watch('group', function () {\n                        if (initGroup) {\n                            $timeout(function () {\n                                initGroup  = false;\n                            });\n                        } else {\n                            $scope.saveGroup();\n                        }\n                    });\n                });\n                $scope.getDocCategories().then(function () {\n                    $scope.$watch('categories', function () {\n                        if (initCategories) {\n                            $timeout(function () {\n                                initCategories  = false;\n                            });\n                        } else {\n                            $scope.saveCategories();\n                        }\n                    });\n                });\n                $scope.getIntroText();\n                $scope.getDocDates();\n\n                $scope.$watch('doc.title', function () {\n                    if (initTitle) {\n                        $timeout(function () {\n                            initTitle = false;\n                        });\n                    } else {\n                        $scope.saveTitle();\n                    }\n                });\n                $scope.$watch('doc.slug', function () {\n                    if (initSlug) {\n                        $timeout(function () {\n                            initSlug = false;\n                        });\n                    } else {\n                        // Changing doc.slug in-place will trigger the $watch\n                        var safe_slug       = $scope.doc.slug;\n                        var sanitized_slug  = clean_slug(safe_slug);\n                        // If cleaning the slug didn't change anything, we have a valid NEW slug, and we can save it\n                        if (safe_slug == sanitized_slug) {\n                            $scope.saveSlug();\n                        } else {\n                            // Change the slug in-place, which will trigger another watch\n                            // (handled by the POST function)\n                            console.log('Invalid slug, reverting');\n                            $scope.doc.slug = sanitized_slug;\n                        }\n                    }\n                });\n\n                // Save the content every 5 seconds\n                var timeout     = null;\n                $scope.$watch('doc.content.content', function () {\n                    if (initContent) {\n                        $timeout(function () {\n                            initContent = false;\n                        });\n                    } else {\n                        if (timeout) {\n                            $timeout.cancel(timeout);\n                        }\n                        timeout     = $timeout(function () {\n                            $scope.saveContent();\n                        }, 5000);\n                    }\n                });\n            });\n        };\n        /**\n         * getShortUrl\n         *\n         * Makes API call to opngv.us/api\n         * Runs when the 'Get Short Url' button is clicked on the 'Document Information' tab.\n        */\n        $scope.getShortUrl      = function () {\n            /**\n            * Hardcoded API Credentials\n            */\n            var opngv = {\n                username    : 'madison-robot',\n                password    : 'MeV3MJJE',\n                api         : 'http://opngv.us/yourls-api.php'\n            };\n\n            //Construct document url\n            var slug        = $scope.doc.slug;\n            var long_url    = _baseUrl + '/docs/' + slug;\n\n            $http({\n                url     : opngv.api,\n                method  : 'JSONP',\n                params  : {\n                    callback    : 'JSON_CALLBACK',\n                    action      : 'shorturl',\n                    format      : 'jsonp',\n                    url         : long_url,\n                    username    : opngv.username,\n                    password    : opngv.password\n                }\n                }).success(function (data) {\n                    $scope.short_url    = data.shorturl;\n                }).error(function (data) {\n                    console.error(data);\n                    growl.error('There was an error generating your short url.');\n                });\n        };\n        $scope.setSelectOptions = function () {\n\n            $scope.categoryOptions    = {\n                placeholder         : 'Agrega categorías del documento',\n                multiple            : true,\n                simple_tags         : true,\n                tokenSeparators     : [\",\"],\n                tags                : function () {\n                  return $scope.suggestedCategories;\n                },\n                initSelection       : function (element, callback) {\n                  // Remove initial 0 on $scope.categories\n                  $scope.categories.splice(0, 1);\n\n                  // Get doc categories (There is a bug using multiple select with async data)\n                  $http.get(_baseUrl + '/api/docs/' + $scope.doc_id + '/categories').success(function (data) {\n\n                      // Construct $scope.categories\n                      angular.forEach(data, function (category) {\n                          $scope.categories.push(category.name + ' - ' + category.kind);\n                      });\n\n                      var returned    = [];\n\n                      // Make sure $scope.categories only contains unique values\n                      $scope.categories = $.unique( $scope.categories );\n\n                      // Generate initSelection\n                      angular.forEach($scope.categories, function (category, index) {\n                          returned.push(angular.copy({\n                              id      : index,\n                              text    : category\n                          }));\n                      });\n\n                      // Return initSelection\n                      callback(returned);\n\n                  }).error(function (data) {\n                      console.error(\"Unable to get categories for document %o: %o\", $scope.doc, data);\n                  });\n                }\n            };\n\n            /*jslint unparam: true*/\n            $scope.statusOptions    = {\n                placeholder         : 'Select Document Status',\n                allowClear          : true,\n                ajax                : {\n                    url         : _baseUrl + '/api/docs/statuses',\n                    dataType    : 'json',\n                    data        : function (term, page) {\n                        return;\n                    },\n                    results     : function (data, page) {\n                        var returned    = [];\n\n                        angular.forEach(data, function (status) {\n                            returned.push({\n                                id      : status.id,\n                                text    : status.label\n                            });\n                        });\n                        return {\n                            results     : returned\n                        };\n                    }\n                },\n                data                : function () {\n                    return $scope.suggestedStatuses;\n                },\n                results             : function () {\n                    return $scope.status;\n                },\n                createSearchChoice  : function (term) {\n                    return {\n                        id      : term,\n                        text    : term\n                    };\n                },\n                initSelection       : function (element, callback) {\n                    callback($scope.status);\n                }\n            };\n\n            $scope.groupOptions    = {\n                placeholder         : 'Select Document Group',\n                allowClear          : true,\n                ajax                : {\n                    url         : _baseUrl + '/api/docs/groups',\n                    dataType    : 'json',\n                    data        : function (term, page) {\n                        return;\n                    },\n                    results     : function (data, page) {\n                        var returned    = [];\n\n                        angular.forEach(data, function (group) {\n                            returned.push({\n                                id      : group.id,\n                                text    : group.name\n                            });\n                        });\n                        return {\n                            results     : returned\n                        };\n                    }\n                },\n                data                : function () {\n                    return $scope.suggestedGroups;\n                },\n                results             : function () {\n                    return $scope.group;\n                },\n                createSearchChoice  : function (term) {\n                    return {\n                        id      : term,\n                        text    : term\n                    };\n                },\n                initSelection       : function (element, callback) {\n                    callback($scope.group);\n                }\n            };\n\n            $scope.sponsorOptions   = {\n                placeholde          : 'Select Document Sponsor',\n                allowClear          : true,\n                ajax                : {\n                    url         : _baseUrl + '/api/user/sponsors/all',\n                    dataType    : 'json',\n                    data        : function () {\n                        return;\n                    },\n                    results     : function (data) {\n                        var returned = [];\n\n                        if(!data.success) {\n                            alert(data.message);\n                            return;\n                        }\n\n                        angular.forEach(data.sponsors, function (sponsor) {\n                            var text    = \"\";\n\n                            switch(sponsor.sponsorType) {\n                                case 'group':\n                                    text    = \"[Group] \" + sponsor.name;\n                                    break;\n                                case 'user':\n                                    text    = sponsor.fname + \" \" + sponsor.lname + \" - \" + sponsor.email;\n                                    break;\n                            }\n\n                            returned.push({\n                                id      : sponsor.id,\n                                type    : sponsor.sponsorType,\n                                text    : text\n                            });\n                        });\n\n                        return {\n                            results: returned\n                        };\n                    }\n                },\n                initSelection       : function (element, callback) {\n                    callback($scope.sponsor);\n                }\n            };\n            /*jslint unparam: false*/\n        };\n        $scope.statusChange     = function (status) {\n            $scope.status   = status;\n        };\n        $scope.sponsorChange    = function (sponsor ) {\n            $scope.sponsor  = sponsor;\n        };\n        $scope.groupChange    = function (group) {\n            $scope.group  = group;\n        };\n        $scope.categoriesChange = function (categories) {\n            $scope.categories   = categories;\n        };\n        $scope.getDoc           = function (id) {\n            return $http.get(_baseUrl + '/api/docs/' + id)\n                .success(function (data) {\n                    $scope.doc  = data;\n            });\n        };\n        $scope.saveTitle        = function () {\n            return $http.post(_baseUrl +  '/api/docs/' + $scope.doc.id + '/title', {\n                'title' : $scope.doc.title\n            })\n                .success(function (data) {\n                    console.log(\"Title saved successfully: %o\", data);\n                }).error(function (data) {\n                    console.error(\"Error saving title for document:\", data);\n                });\n        };\n        $scope.saveSlug         = function () {\n            return $http.post(_baseUrl +  '/api/docs/' + $scope.doc.id + '/slug', {\n                'slug'  : $scope.doc.slug\n            })\n                .success(function (data) {\n                    console.log(_baseUrl + \"Slug sent: %o\", data);\n                }).error(function (data) {\n                    console.error(\"Error saving slug for document:\", data);\n                });\n        };\n        $scope.saveContent      = function () {\n            return $http.post(_baseUrl + '/api/docs/' + $scope.doc.id + '/content', {\n                'content'   : $scope.doc.content.content\n            })\n                .success(function (data) {\n                    console.log(\"Content saved successfully: %o\", data);\n                }).error(function (data) {\n                    console.error(\"Error saving content for document:\", data);\n                });\n        };\n        $scope.createDate       = function (newDate) {\n            if ($scope.newdate.label !== '') {\n                $scope.newdate.date = $filter('date')(newDate, 'short');\n\n                $http.post(_baseUrl + '/api/docs/' + $scope.doc.id + '/dates', {\n                    date    : $scope.newdate\n                })\n                    .success(function (data) {\n                        data.date       = Date.parse(data.date);\n                        data.$changed   = false;\n                        $scope.dates.push(data);\n\n                        $scope.newdate  = {\n                            label   : '',\n                            date    : new Date()\n                        };\n                    }).error(function (data) {\n                        console.error(\"Unable to save date: %o\", data);\n                    });\n            }\n        };\n        $scope.deleteDate       = function (date) {\n            $http['delete'](_baseUrl + '/api/docs/' + $scope.doc.id + '/dates/' + date.id)\n                .success(function () {\n                    var index   = $scope.dates.indexOf(date);\n                    $scope.dates.splice(index, 1);\n                }).error(function () {\n                    console.error(\"Unable to delete date: %o\", date);\n                });\n        };\n        $scope.saveDate         = function (date) {\n            var sendDate    = angular.copy(date);\n            sendDate.date   = $filter('date')(sendDate.date, 'short');\n\n            return $http.put(_baseUrl + '/api/dates/' + date.id, {\n                date    : sendDate\n            })\n                .success(function (data) {\n                    date.$changed   = false;\n                    console.log(\"Date saved successfully: %o\", data);\n                }).error(function (data) {\n                    console.error(\"Unable to save date: %o (%o)\", date, data);\n                });\n        };\n        $scope.getDocDates      = function () {\n            return $http.get(_baseUrl + '/api/docs/' + $scope.doc.id + '/dates')\n                .success(function (data) {\n                    angular.forEach(data, function (date, index) {\n                        date.date       = Date.parse(date.date);\n                        date.$changed   = false;\n                        $scope.dates.push(angular.copy(date));\n\n                        $scope.$watch('dates[' + index + ']', function (newitem, olditem) {\n                            if (!angular.equals(newitem, olditem) && newitem !== undefined) {\n                                newitem.$changed = true;\n                            }\n                        }, true);\n                    });\n                }).error(function (data) {\n                    console.error(\"Error getting dates: %o\", data);\n                });\n        };\n        $scope.getVerifiedUsers = function () {\n            return $http.get(_baseUrl + '/api/user/verify')\n                .success(function (data) {\n                    angular.forEach(data, function (verified) {\n                        $scope.verifiedUsers.push(angular.copy(verified.user));\n                    });\n                }).error(function (data) {\n                    console.error(\"Unable to get verified users: %o\", data);\n                });\n        };\n        $scope.getDocCategories = function () {\n            return $http.get(_baseUrl + '/api/docs/' + $scope.doc.id + '/categories')\n                .success(function (data) {\n                    angular.forEach(data, function ( category) {\n                        $scope.categories.push(category.name + ' - ' + category.kind);\n                    });\n                }).error(function (data) {\n                    console.error(\"Unable to get categories for document %o: %o\", $scope.doc, data);\n                });\n        };\n        $scope.getIntroText     = function () {\n            return $http.get(_baseUrl + '/api/docs/' + $scope.doc.id + '/introtext')\n                .success(function (data) {\n                    $scope.introtext    = data.meta_value;\n                }).error(function (data) {\n                    console.error(\"Unable to get Intro Text for document %o: %o\", $scope.doc, data);\n                });\n        };\n        $scope.getDocSponsor    = function () {\n            return $http.get(_baseUrl + '/api/docs/' + $scope.doc.id + '/sponsor')\n                .success(function (data) {\n                    if(data.sponsorType === undefined){\n                        $scope.sponsor = null;\n                        return;\n                    }\n\n                    var text = \"\";\n                    switch(data.sponsorType.toLowerCase()) {\n                        case 'group':\n                            text    = \"[Group] \" + data.name;\n                            break;\n                        case 'user':\n                            text    = data.fname + \" \" + data.lname + \" - \" + data.email;\n                            break;\n                    }\n\n                    $scope.sponsor  = {\n                        id      : data.id,\n                        type    :  data.sponsorType.toLowerCase(),\n                        text    : text\n                    };\n                }).error(function (data) {\n                    console.error(\"Error getting document sponsor: %o\", data);\n                });\n        };\n        $scope.getDocGroup     = function () {\n            return $http.get(_baseUrl + '/api/docs/' + $scope.doc.id + '/group')\n                .success(function (data) {\n                    if (data.id === undefined) {\n                        $scope.group = null;\n                    } else {\n                        $scope.group = {\n                            id      : data.id,\n                            text    : data.name\n                        };\n                    }\n                }).error(function (data) {\n                    console.error(\"Error getting document group: %o\", data);\n                });\n        };\n        $scope.getDocStatus     = function () {\n            return $http.get(_baseUrl + '/api/docs/' + $scope.doc.id + '/status')\n                .success(function (data) {\n                    if (data.id === undefined) {\n                        $scope.status = null;\n                    } else {\n                        $scope.status = {\n                            id      : data.id,\n                            text    : data.label\n                        };\n                    }\n                }).error(function (data) {\n                    console.error(\"Error getting document status: %o\", data);\n                });\n        };\n        $scope.getAllStatuses   = function () {\n            $http.get(_baseUrl + '/api/docs/statuses')\n                .success(function (data) {\n                    angular.forEach(data, function (status) {\n                        $scope.suggestedStatuses.push(status.label);\n                    });\n                }).error(function (data) {\n                    console.error(\"Unable to get document statuses: %o\", data);\n                });\n        };\n        $scope.getAllGroups   = function () {\n            $http.get(_baseUrl + '/api/docs/groups')\n                .success(function (data) {\n                    angular.forEach(data, function (status) {\n                        $scope.suggestedGroups.push(status.label);\n                    });\n                }).error(function (data) {\n                    console.error(\"Unable to get document groups: %o\", data);\n                });\n        };\n        $scope.getAllCategories = function () {\n            return $http.get(_baseUrl + '/api/docs/categories')\n                .success(function (data) {\n                    angular.forEach(data, function (category) {\n                        $scope.suggestedCategories.push(category.name + ' - ' + category.kind);\n                    });\n                })\n                .error(function (data) {\n                    console.error(\"Unable to get document categories: %o\", data);\n                });\n        };\n        $scope.saveStatus       = function () {\n            return $http.post(_baseUrl + '/api/docs/' + $scope.doc.id + '/status', {\n                status  : $scope.status\n            })\n                .success(function (data) {\n                    console.log(\"Status saved successfully: %o\", data);\n                }).error(function (data) {\n                    console.error(\"Error saving status: %o\", data);\n                });\n        };\n        $scope.saveGroup       = function () {\n            return $http.post(_baseUrl + '/api/docs/' + $scope.doc.id + '/group', {\n                group  : $scope.group\n            })\n                .success(function (data) {\n                    console.log(\"Group saved successfully: %o\", data);\n                }).error(function (data) {\n                    console.error(\"Error saving group: %o\", data);\n                });\n        };\n        $scope.saveSponsor      = function () {\n            return $http.post(_baseUrl + '/api/docs/' + $scope.doc.id + '/sponsor', {\n                'sponsor'   : $scope.sponsor\n            })\n                .success(function (data) {\n                    console.log(\"Sponsor saved successfully: %o\", data);\n                }).error(function (data) {\n                    console.error(\"Error saving sponsor: %o\", data);\n                });\n        };\n        $scope.saveCategories   = function () {\n            return $http.post(_baseUrl + '/api/docs/' + $scope.doc.id + '/categories', {\n                'categories'    : $scope.categories\n            })\n                .success(function (data) {\n                    if(typeof data.status !== 'undefined' && data.status == 'error'){\n                      angular.forEach(data.messages, function (message) {\n                        growl.error(message.text);\n                      });\n                      console.log(\"Error saving categories for document: %o\", data);\n                    }else{\n                      console.log(\"Categories saved successfully: %o\", data);\n                    }\n                }).error(function (data) {\n                    console.error(\"Error saving categories for document %o: %o \\n %o\", $scope.doc, $scope.categories, data);\n                });\n        };\n        //Triggered 5 seconds after last change to textarea with ng-model=\"introtext\"\n        $scope.saveIntroText    = function (introtext) {\n            return $http.post(_baseUrl + '/api/docs/' + $scope.doc.id + '/introtext', {\n                'intro-text'    : introtext\n            })\n                .success(function (data) {\n                    console.log(\"Intro Text saved successfully: %o\", data);\n                }).error(function (data) {\n                    console.error(\"Error saving intro text for document %o: %o\", $scope.doc, $scope.introtext);\n                });\n        };\n    }]);\n","angular.module( 'madisonApp.dashboardControllers' )\n    .controller( 'DashboardSettingsController', [ '$scope', '$http', function ( $scope, $http ) {\n        $scope.admins   = [];\n\n        $scope.getAdmins    = function () {\n            $http.get( '/api/user/admin' )\n                .success( function ( data ) {\n                    $scope.admins   = data;\n                })\n                .error( function ( data ) {\n                    console.error( data );\n                });\n        };\n        $scope.saveAdmin    = function ( admin ) {\n            admin.saved = false;\n\n            $http.post( '/api/user/admin', {\n              'admin'   : admin\n            })\n                .success( function () {\n                    admin.saved = true;\n                })\n                .error( function ( data ) {\n                    console.error( data );\n                });\n        };\n        $scope.init         = function () {\n            $scope.getAdmins();\n        };\n    }]);","angular.module( 'madisonApp.dashboardControllers' )\n    .controller( 'DashbordVerifyController', [ '$scope', '$http', function ( $scope, $http ) {\n        $scope.requests     = [];\n\n        $scope.init         = function () {\n            $scope.getRequests();\n        };\n        $scope.getRequests  = function () {\n            $http.get( '/api/user/verify' )\n                .success( function ( data ) {\n                    $scope.requests = data;\n                })\n                .error( function ( data ) {\n                    console.error( data );\n                });\n        };\n        $scope.update       = function ( request, status ) {\n            $http.post( '/api/user/verify', {\n              'request' : request,\n              'status'  : status\n            })\n                .success( function () {\n                    request.meta_value  = status;\n                })\n                .error( function ( data ) {\n                    console.error( data );\n                });\n        };\n    }]);","angular.module( 'madisonApp.dashboardControllers' )\n    .controller( 'DashboardVerifyGroupController', [ '$scope', '$http', function ( $scope, $http ) {\n        $scope.requests     = [];\n\n        $scope.init         = function() {\n            $scope.getRequests();\n        };\n        $scope.getRequests  = function() {\n            $http.get( '/api/groups/verify' )\n                .success( function( data, status, headers, config ){\n                    $scope.requests = data;\n                })\n                .error( function( data, status, headers, config ){\n                    console.error( data );\n                });\n        };\n        $scope.update       = function( request, status, event ) {\n            $http.post( '/api/groups/verify', {\n                'request'   : request,\n                'status'    : status\n            })\n                .success( function( data ){\n                    request.status  = status;\n                })\n                .error( function( data, status, headers, config ){\n                    console.error( data );\n                });\n        };\n    }]);","angular.module( 'madisonApp.dashboardControllers' )\n    .controller( 'DashboardVerifyUserController', [ '$scope', '$http', function ( $scope, $http ) {\n        $scope.requests = [];\n\n        $scope.init         = function() {\n            $scope.getRequests();\n        };\n        $scope.getRequests  = function() {\n            $http.get( '/api/user/independent/verify' )\n                .success(function( data, status, headers, config ){\n                    $scope.requests = data;\n                })\n                .error( function( data, status, headers, config ){\n                    console.error( data );\n                });\n        };\n        $scope.update       = function( request, status, event ) {\n            $http.post( '/api/user/independent/verify', {\n                'request'   : request,\n                'status'    : status\n            })\n                .success( function( data ){\n                    request.meta_value  = status;\n                    location.reload();\n                })\n                .error( function( data, status, headers, config ){\n                    console.error( data );\n                });\n        };\n    }]);","angular.module('madisonApp.resources')\n    .factory('Doc', ['$resource', function($resource) {\n        return $resource(_baseUrl + \"/api/docs/:id\", null, {\n            query: {\n                method  : 'GET',\n                isArray : false\n            }\n        });\n    }]);\n","angular.module( 'madisonApp.services' )\n    .factory( 'annotationService', [ '$rootScope', '$sce', function ( $rootScope, $sce ) {\n        var annotationService           = {};\n        var converter                   = new Markdown.Converter();\n        annotationService.annotations   = [];\n\n        annotationService.setAnnotations    = function ( annotations ) {\n            angular.forEach(annotations, function ( annotation ) {\n                annotation.html = $sce.trustAsHtml( converter.makeHtml( annotation.text ) );\n                this.annotations.push( annotation );\n            }, this );\n\n            this.broadcastUpdate();\n        };\n        annotationService.addAnnotation     = function ( annotation ) {\n            if ( annotation.id === undefined ) {\n                var interval    = window.setInterval( function () {\n                    this.addAnnotation( annotation );\n                    window.clearInterval( interval );\n                }.bind(this), 500 );\n            } else {\n                annotation.html = $sce.trustAsHtml(converter.makeHtml(annotation.text));\n                this.annotations.push(annotation);\n                this.broadcastUpdate();\n            }\n        };\n        annotationService.broadcastUpdate   = function () {\n            $rootScope.$broadcast( 'annotationsUpdated' );\n        };\n\n        return annotationService;\n    }]);","angular.module('madisonApp.services')\n    .factory('createLoginPopup', ['$document', '$timeout', 'growl', function ($document, $timeout, growl) {\n        var body            = $document.find('body');\n        var html            = $document.find('html');\n        var attach_handlers = function () {\n            html.on('click.popup', function () {\n                $('.popup').remove();\n                html.off('click.popup');\n            });\n        };\n        var ajaxify_form    = function (inForm, callback) {\n                var form    = $(inForm);\n                form.submit(function (e) {\n                e.preventDefault();\n\n                $.post(form.attr('action'), form.serialize(), function (response) {\n                    if (response.errors && Object.keys(response.errors).length) {\n                        var error_html = $('<ul></ul>');\n\n                        /*jslint unparam:true*/\n                        angular.forEach(response.errors, function (value, key) {\n                            //** If growl notifications are prefered\n                            // growl.error(value[0]);\n                            //** If growl notifications are prefered\n                            error_html.append('<li>' + value + '</li>');\n                        });\n                        /*jslint unparam:false*/\n\n                        form.find('.errors').html(error_html);\n                    } else {\n                        callback(response);\n                    }\n                });\n            });\n        };\n\n        return function LoginPopup(event) {\n            var popup   = $('<div class=\"popup unauthed-popup\"><p>Por favor regístrate.</p>' +\n                '<input type=\"button\" id=\"login\" value=\"Ingresar\" class=\"btn btn-primary\"/>' +\n                '<input type=\"button\" id=\"signup\" value=\"Registrarse\" class=\"btn btn-primary\" /></div>');\n\n\n            popup.on('click.popup', function ( event) {\n                event.stopPropagation();\n            });\n\n            $('#login', popup).click(function (event) {\n                event.stopPropagation();\n                event.preventDefault();\n\n                $.get(_baseUrl + '/api/auth/login', {}, function (data) {\n                    data    = $(data);\n\n                    ajaxify_form(data.find('form'), function () {\n                        $('html').trigger('click.popup');\n                        location.reload(false);\n                    });\n                    popup.html(data);\n                });\n            });\n            $('#signup', popup).click(function (event) {\n                event.stopPropagation();\n                event.preventDefault();\n\n                $.get(_baseUrl + '/api/auth/signup', {}, function (data) {\n                    data    = $(data);\n\n                    ajaxify_form(data.find('form'), function ( result) {\n                        $('html').trigger('click.popup');\n                        alert(result.message);\n                    });\n\n                    popup.html(data);\n                });\n            });\n            body.append(popup);\n\n            var position    = {\n                'top'   : event.pageY - popup.height(),\n                'left'  : event.clientX\n            };\n            popup.css(position).css('position', 'absolute');\n            popup.css('z-index', '999');\n\n            $timeout(function () {\n                attach_handlers();\n            }, 50);\n        };\n    }]);\n","angular.module( 'madisonApp.services' )\n    .service( 'modalService', [ '$modal', function ( $modal ) {\n        //Set modal defaults\n        var modalDefaults   = {\n            backdrop            : true,\n            keyboard            : true,\n            modalFade           : true,\n            templateUrl         : '/consulta-public/templates/modal.html'\n        };\n        var modalOptions    = {\n            closeButtonText     : 'Close',\n            actionButtonText    : false,\n            headerText          : 'Notice',\n            bodyText            : 'Hmm... someone forgot the content here...'\n        };\n\n        this.showModal  = function ( customModalDefaults, customModalOptions ) {\n            if ( !customModalDefaults ) {\n                customModalDefaults     = {};\n            }\n            //Accepts either true or 'static'.  'static' doesn't close the modal on click.\n            customModalDefaults.backdrop = true;\n\n            return this.show( customModalDefaults, customModalOptions );\n        };\n        this.show       = function ( customModalDefaults, customModalOptions ) {\n            //Create temp objects to work with since we're in a singleton service\n            var tempModalDefaults   = {};\n            var tempModalOptions    = {};\n\n            //Map angular-ui modal custom defaults to modal defaults defined in service\n            angular.extend( tempModalDefaults, modalDefaults, customModalDefaults );\n            //Map modal.html $scope custom properties to defaults defined in service\n            angular.extend( tempModalOptions, modalOptions, customModalOptions );\n\n            if ( !tempModalDefaults.controller ) {\n                tempModalDefaults.controller    = function ( $scope, $modalInstance ) {\n                    $scope.modalOptions         = tempModalOptions;\n                    $scope.modalOptions.ok      = function ( result ) {\n                        $modalInstance.close( result );\n                    };\n                    $scope.modalOptions.close   = function ( result ) {\n                        $modalInstance.dismiss( 'cancel' );\n                    };\n                };\n            }\n\n            return $modal.open( tempModalDefaults ).result;\n        };\n    }]);\n","angular.module('madisonApp.services')\n    .factory('UserService', ['$rootScope', '$http', function ($rootScope, $http) {\n        var UserService  = {};\n        UserService.user = {};\n\n        UserService.getUser = function () {\n            UserService.exists = $http.get(_baseUrl + '/api/user/current')\n                .success(function ( data ) {\n                    UserService.user = data.user;\n                    $rootScope.$broadcast('userUpdated');\n                });\n        };\n\n        return UserService;\n    }]);\n","$(document).ready(function () {\n\n  var diff_generated = false;\n\n  function getDiff(enabled) {\n\n    if(diff_generated !== true) {\n\n      var dmp = new diff_match_patch();\n      dmp.Diff_Timeout = 1;\n      dmp.Diff_EditCost = 5;\n\n      $('.diff_layout').each(function(){\n\n        var $element = $(this);\n        var $text1 = $element.find('.text1');\n        var $text2 = $element.find('.text2');\n        var $inline_diff_result = $element.find('.inline_diff_result');\n        var $side_diff_result = $element.find('.side_diff_result');\n\n        var text1 = $text1.html();\n        var text2 = $text2.html();\n\n        // Inline Diff\n        var ds = diffString(text1, text2);\n        $inline_diff_result.html(ds);\n\n        // Side by Side Diff\n        $side_diff_result_text_1 = $element.find('.side_diff_result.side_text_1');\n        $side_diff_result_text_2 = $element.find('.side_diff_result.side_text_2');\n        $side_diff_result_text_1.html(ds);\n        $side_diff_result_text_2.html(ds);\n        $side_diff_result_text_1.find('ins').remove();\n        $side_diff_result_text_2.find('del').remove();\n\n        // Hide original texts\n        $text1.hide();\n        $text2.hide();\n\n        diff_generated = true;\n      });\n\n    }\n\n    $('.diff_result').hide();\n\n    $('.diff_layout').each(function(){\n      var $diff_result_enabled = $(this).find('.'+enabled);\n      $diff_result_enabled.show();\n    });\n  }\n\n  function getInlineDiff() {\n    $('.side-diff-visible').hide();\n    $('.inline-diff-visible').show();\n    getDiff('inline_diff_result');\n  }\n\n  function getSideDiff() {\n    $('.side-diff-visible').show();\n    $('.inline-diff-visible').hide();\n    getDiff('side_diff_result');\n  }\n\n  $('#inline-diff-layout-toggle').click(function(e){\n    e.preventDefault();\n    getInlineDiff();\n  });\n\n  $('#side-diff-layout-toggle').click(function(e){\n    e.preventDefault();\n    getSideDiff();\n  });\n\n  getSideDiff();\n\n});\n","angular.module( 'madisonApp.directives' )\n    .directive( 'activitySubComment', [ 'growl', '$anchorScroll', '$timeout', function ( growl, $anchorScroll, $timeout ) {\n        return {\n            restrict    : 'A',\n            transclude  : true,\n            templateUrl : '/consulta-public/templates/activity-sub-comment.html',\n            compile     : function () {\n                return {\n                    post: function ( scope, element, attrs ) {\n                        var commentLink = element.find( '.subcomment-link' ).first();\n                        var linkPath    = window.location.origin + window.location.pathname + '#annsubcomment_' + attrs.subCommentId;\n                        $( commentLink ).attr( 'data-clipboard-text', linkPath );\n\n                        var client      = new ZeroClipboard( commentLink );\n                        client.on( 'aftercopy', function ( event ) {\n                            scope.$apply( function () {\n                                growl.success( \"Link copied to clipboard.\" );\n                            });\n                        });\n\n                        $timeout( function () {\n                            $anchorScroll();\n                        }, 0 );\n                    }\n                };\n            }\n        };\n    }]);\n","angular.module( 'madisonApp.directives' )\n    .directive( 'annotationItem', [ 'growl', function ( growl ) {\n        return {\n            restrict    : 'A',\n            transclude  : true,\n            templateUrl : '/consulta-public/templates/annotation-item.html',\n            compile     : function () {\n                return {\n                    post    : function ( scope, element, attrs ) {\n                        var commentLink = element.find( '.comment-link' ).first();\n                        var linkPath    = window.location.origin + window.location.pathname + '#' + attrs.activityItemLink;\n                        $( commentLink ).attr( 'data-clipboard-text', linkPath );\n\n                        var client      = new ZeroClipboard( commentLink );\n                        client.on( 'aftercopy', function ( event ) {\n                            scope.$apply( function () {\n                                growl.success( \"Link copied to clipboard.\" );\n                            });\n                        });\n\n                        var $span       = $( element ).find( '.activity-actions > span.ng-binding' );\n                        $span.on( \"click\", function() {\n                            var $feedbackElement    = $( this ).closest( '.activity-item' );\n                            var prevBackground      = $feedbackElement.css( 'background' );\n                            $feedbackElement.css( \"background\", \"#2276d7\" );\n                            setTimeout( function() {\n                                $feedbackElement.css( \"background\", prevBackground );\n                            }, 500 );\n                        });\n                    }\n                };\n            }\n        };\n    }]);\n","angular.module( 'madisonApp.directives' )\n    .directive( 'commentItem', [ 'growl', function ( growl ) {\n        return {\n            restrict    : 'A',\n            transclude  : true,\n            templateUrl : '/consulta-public/templates/comment-item.html',\n            compile     : function () {\n                return {\n                    post: function ( scope, element, attrs ) {\n                        var commentLink = element.find( '.comment-link' ).first();\n                        var linkPath    = window.location.origin + window.location.pathname + '#' + attrs.activityItemLink;\n                        $( commentLink ).attr( 'data-clipboard-text', linkPath );\n\n                        var client      = new ZeroClipboard( commentLink );\n                        client.on( 'aftercopy', function ( event ) {\n                            scope.$apply( function () {\n                                growl.success( \"Link copied to clipboard.\" );\n                            });\n                        });\n\n                        var $span       = $( element ).find( '.activity-icon > span.ng-binding' );\n                        $span.on( \"click\", function() {\n                            $( element ).parent().effect( \"highlight\",{\n                                color   : \"#2276d7\"\n                            }, 1000 );\n                        });\n                    }\n                };\n            }\n        };\n    }]);\n","angular.module( 'madisonApp.directives' )\n    .directive( 'docComments', function () {\n        return {\n            restrict    : 'AECM',\n            templateUrl : '/consulta-public/templates/doc-comments.html'\n        };\n    });\n","angular.module( 'madisonApp.directives' )\n    .directive( 'docLink', [ '$http', '$compile', function ( $http, $compile ) {\n        return {\n            restrict    : 'AECM',\n            link        : function ( scope, elem, attrs ) {\n                $http.get( '/api/docs/' + attrs.docId )\n                    .success( function ( data ) {\n                        var html    = '<a href=\"/docs/' + data.slug + '\">' + data.title + '</a>';\n                        var e       = $compile( html )( scope );\n                        elem.replaceWith( e );\n                    }).error( function ( data ) {\n                        console.error( \"Unable to retrieve document %o: %o\", attrs.docId, data );\n                    });\n            }\n        };\n    }]);","angular.module( 'madisonApp.directives' )\n    .directive( 'docListItem', function() {\n        return {\n            restrict    : 'A',\n            templateUrl : '/consulta-public/templates/doc-list-item.html'\n        };\n    });\n","angular.module( 'madisonApp.directives' )\n    .directive( 'ngBlur', function () {\n        return function ( scope, elem, attrs ) {\n            elem.bind( 'blur', function () {\n                scope.$apply( attrs.ngBlur );\n            });\n        };\n    });","angular.module( 'madisonApp.directives' )\n    .directive( 'profileCompletionMessage', [ '$http', function ( $http ) {\n        return {\n            restrict    : 'A',\n            templateUrl : '/consulta-public/templates/profile-completion-message.html',\n            link        : function ( scope ) {\n                scope.updateEmail   = function ( newEmail, newPassword ) {\n                    //Issue PUT request to update user\n                    $http.put(_baseUrl + '/api/user/' + scope.user.id + '/edit/email', {\n                        email       : newEmail,\n                        password    : newPassword\n                    })\n                        .success( function () {\n                            //Note: Growl message comes from server response\n                            scope.user.email = newEmail;\n                        }).error( function ( data ) {\n                            console.error( \"Error updating user email: %o\", data );\n                            $('.update-email-error').html(data.messages[0].text);\n                        });\n                };\n            }\n        };\n    }]);\n","angular.module( 'madisonApp.directives' )\n    .directive( 'subcommentLink', [ 'growl', '$anchorScroll', '$timeout', function ( growl, $anchorScroll, $timeout ) {\n        return {\n            restrict    : 'A',\n            template    : '<span class=\"glyphicon glyphicon-link\" title=\"Copy link to clipboard\"></span>',\n            compile     : function () {\n                return {\n                    post    : function ( scope, element, attrs ) {\n                        var commentLink = element;\n                        var linkPath    = window.location.origin + window.location.pathname + '#subcomment_' + attrs.subCommentId;\n                        $( commentLink ).attr( 'data-clipboard-text', linkPath );\n\n                        var client      = new ZeroClipboard( commentLink );\n                        client.on( 'aftercopy', function ( event ) {\n                            scope.$apply( function () {\n                                growl.success( \"Link copied to clipboard.\" );\n                            });\n                        });\n\n                        $timeout( function () {\n                            $anchorScroll();\n                        }, 0 );\n\n                        var $span       = $( element ).closest( '.activity-icon' ).children( 'span.ng-binding' );\n                        $span.on( \"click\", function() {\n                            $( element ).closest( '.activity-reply' ).effect( \"highlight\", {\n                                color   : \"#2276d7\"\n                            }, 1000 );\n                        });\n                    }\n                };\n            }\n        };\n    }]);\n","angular.module( 'madisonApp.filters' )\n    .filter( 'getById', function () {\n        return function ( input, id ) {\n            var i   = 0;\n            var len = input.length;\n            for ( i; i < len; i++ ) {\n                if ( +input[i].id === +id ) {\n                    return input[i];\n                }\n            }\n\n            return null;\n        };\n    });","angular.module( 'madisonApp.filters' )\n    .filter( 'gravatar', function () {\n        return function ( email ) {\n            var hash = '';\n            if ( email !== undefined ) {\n                hash = CryptoJS.MD5( email.toLowerCase() );\n            }\n\n            return hash;\n        };\n    });","angular.module( 'madisonApp.filters' )\n    .filter( 'parseDate', function () {\n        return function ( date ) {\n            return Date.parse( date );\n        };\n    });","angular.module( 'madisonApp.filters' )\n    .filter( 'toArray', function () {\n        return function ( obj ) {\n            if ( !( obj instanceof Object ) ) {\n                return obj;\n            }\n            return _.map( obj, function ( val, key ) {\n                val.$key    = key;\n                return val;\n            });\n        };\n    });","//var angular = require('angular');\n\nwindow.getAnnotationService = function () {\n  var elem = angular.element($('html'));\n  var injector = elem.injector();\n  var annotationService = injector.get('annotationService');\n\n  return annotationService;\n};\n","/*global window*/\nwindow.jQuery = window.$;\n$(function() {\n  // Ajax Setup\n  $.ajaxPrefilter(function(options, originalOptions, jqXHR) {\n      var token;\n      if (! options.crossDomain) {\n          token = $('meta[name=\"token\"]').attr('content');\n          if (token) {\n              jqXHR.setRequestHeader('X-CSRF-Token', token);\n          }\n      }\n\n      return jqXHR;\n  });\n});\n\nvar imports = [\n    'madisonApp.filters',\n    'madisonApp.services',\n    'madisonApp.resources',\n    'madisonApp.directives',\n    'madisonApp.controllers',\n    'madisonApp.dashboardControllers',\n    'ui',\n    'ui.bootstrap',\n    'ui.bootstrap.datetimepicker',\n    'ui.bootstrap.pagination',\n    'ui.select',\n    'ngAnimate',\n    'ngCookies',\n    'ngSanitize',\n    'angular-growl',\n    'ngResource',\n    'ngRoute',\n    'ipCookie',\n    'pascalprecht.translate'\n  ];\n\nmoment.locale('es');\n\nvar app = angular.module('madisonApp', imports);\n\n// Add a prefix to all http calls\n// app.config(function ($httpProvider) {\n//   $httpProvider.interceptors.push(function ($q) {\n//     return {\n//       request: function (request) {\n//         var doNotPrefix = [\n//           'subcomment_renderer.html',\n//           'template/',\n//           'tour/'\n//         ];\n//         var shouldWeAvoidPrefix = function(element, index) {\n//           return request.url.indexOf(element) > -1;\n//         };\n//\n//         if ($.grep(doNotPrefix, shouldWeAvoidPrefix).length > 0) {\n//           // templates included in angular-bootstrap\n//           // e.g. angular.module(\"template/tabs/tabset.html\",[])\n//           // or defined as ng-templates\n//         } else if (request.url.indexOf(\"templates/\") < 0) {\n//           request.url = \"/consulta/\" + request.url;\n//           request.url = request.url.replace(/\\/\\//g, \"/\");\n//         } else {\n//           request.url = \"/\" + request.url;\n//           request.url = request.url.replace(/\\/\\//g, \"/\");\n//         }\n//         return request || $q.when(request);\n//       }\n//     };\n//   });\n// });\n\napp.config(['growlProvider', '$httpProvider', function (growlProvider, $httpProvider) {\n    //Set up growl notifications\n    growlProvider.messagesKey(\"messages\");\n    growlProvider.messageTextKey(\"text\");\n    growlProvider.messageSeverityKey(\"severity\");\n    growlProvider.onlyUniqueMessages(true);\n    growlProvider.globalTimeToLive(5000);\n}]);\n\napp.config(function ($locationProvider) {\n  $locationProvider.html5Mode(true);\n});\n\napp.config(['$translateProvider', function ($translateProvider) {\n  // $translateProvider.useSanitizeValueStrategy('sanitize');\n\n  $translateProvider.translations('en', {\n    'POSTED': 'Posted',\n    'UPDATED': 'Updated'\n  });\n\n  $translateProvider.translations('es', {\n    'POSTED': 'Publicación',\n    'UPDATED': 'Última actualización'\n  });\n\n  $translateProvider.preferredLanguage('es');\n}]);\n\nwindow.console = window.console || {};\nwindow.console.log = window.console.log || function () {};\n","function googleTranslateElementInit() {\n  new google.translate.TranslateElement({pageLanguage: 'en'}, 'google_translate_element');\n}\n"],"sourceRoot":"/source/"}