{"version":3,"sources":["module.js","googletranslate.js","annotator-madison.js","Annotation.js","App.js","Comment.js","DocumentPage.js","DocumentToc.js","EmailSubscribe.js","HomePage.js","Reader.js","UserNotifications.js","UserPage.js","DashboardDocuments.js","DashboardEditor.js","DashboardSettings.js","DashboardVerify.js","DashboardVerifyGroup.js","DashboardVerifyUser.js","Doc.js","AnnotationService.js","CreateLoginPopup.js","ModalService.js","UserService.js","ActivitySubComment.js","AnnotationItem.js","CommentItem.js","DocComments.js","DocLink.js","DocListItem.js","NgBlur.js","ProfileCompletionMessage.js","SubcommentLink.js","GetById.js","Gravatar.js","ParseDate.js","ToArray.js","annotationServiceGlobal.js","app.js"],"names":["feedbackMessage","message","type","container","html","$container","$","first","fadeIn","append","clearTimeout","messageTimer","setTimeout","clearMessages","fadeOut","googleTranslateElementInit","google","translate","TranslateElement","pageLanguage","Annotator","Plugin","Madison","apply","this","arguments","extend","prototype","events","options","pluginInit","annotator","subscribe","annotations","forEach","annotation","highlights","highlight","attr","id","link","annotationService","getAnnotationService","setAnnotations","addAnnotation","showAnnotationThanks","modal","remote","_baseUrl","keyboard","comment","text","user","name","currentComments","removeClass","collapse","field","tags","length","tag","jField","differ","diff_match_patch","diffs","diff_main","quote","diff_prettyHtml","find","viewer","addField","load","addNoteLink","addNoteActions","addComments","bind","editor","submit","e","_error","_i","_len","_ref","Util","preventEventDefault","fields","element","publish","hide","addEditFields","hasEditTag","explanation","val","trim","toggle","undefined","newField","toAdd","buttonGroup","annotationError","annotateButton","click","addClass","siblings","each","sibling","prop","focus","editButton","commentsHeader","toggleClass","comments","index","ready","annotationComments","commentText","commentSubmit","createComment","annotationAction","generalAction","data","annotationLike","clone","likes","annotationDislike","dislikes","annotationFlag","flags","user_action","that","addLike","addDislike","addFlag","noteLink","linkPath","window","location","origin","pathname","annotationLink","ZeroClipboard","textElement","post","doc","push","children","action","angular","module","controller","$scope","$sce","$http","createLoginPopup","growl","$location","$filter","$timeout","supported","opposed","hash","subCommentId","match","$on","inArray","collapsed","subcomment","label","commentsCollapsed","$apply","init","docId","isSponsor","currentId","sponsored","sponsor","notifyAuthor","success","seen","error","console","getDocComments","method","url","copy","fname","stream","activityOrder","activity","popularity","addAction","$event","collapseComments","subcommentSubmit","focused","document","activeElement","body","pageY","scrollTop","clientX","width","offset","top","left","jQuery","Event","$rootScope","UserService","event","current","previous","pageTitle","$$route","title","getUser","collapsed_comment","disableAuthor","disableCommentAction","getLayoutTexts","userId","texts","common","header","callToAction","commentLabel","commentPlaceholder","subCommentPlaceholder","commentfeedbackMessage","subCommentfeedbackMessage","privateComment","sendComment","ieda","planAGA","cofemer","layoutTexts","doc_layouts","category","parent_id","parent","parentSearch","parentpointer","not_parent","arr","i","deleted_at","$cookies","Doc","hideIntro","annotationHash","secondtab","hideHowToAnnotate","get","introtext","converter","Markdown","Converter","trustAsHtml","makeHtml","meta_value","headings","elm","remove","email","successMessage","subscribeEmail","refEl","search","page","limit","docSearch","q","docFilter","mode","docOrder","date","fetchDocs","docs","Array","updating","params","filter","order","per_page","_","pick","value","key","object","query","totalDocs","pagination","count","perPage","results","$promise","select2","placeholder","allowClear","reverse","startStep","paginate","animate","height","$anchorScroll","presentePlural","howMany","howManySupport","doesSupport","verb","getSupported","created_at","Date","parse","replace","updated_at","setSponsor","group_sponsor","user_sponsor","display_name","lname","err","support","supports","opposes","button","target","otherButton","hasClass","attach_handlers","on","off","ajaxify_form","inForm","callback","form","preventDefault","serialize","response","errors","Object","keys","error_html","popup","elmtop","elmbottom","affix","bottom","checkForEndSelection","range","_k","_len2","_ref1","mouseIsDown","ignoreMouseup","selectedRanges","getSelectedRanges","commonAncestor","parents","isAnnotator","stopPropagation","trigger","reload","result","alert","position","css","annotationData","uri","prefix","urls","create","read","update","destroy","permissions","delete","admin","showViewPermissionsCheckbox","showEditPermissionsCheckbox","userString","exists","then","notifications","$watch","newValue","oldValue","put","meta","activities","verified","abs","absUrl","user_meta","cont","meta_key","showVerified","categories","sponsors","statuses","dates","dateSort","docSort","select2Config","multiple","dateSortConfig","parseDocs","parseDocMeta","collection","item","found","show","split","parseInt","status","group","newdate","verifiedUsers","suggestedCategories","suggestedStatuses","suggestedGroups","clean_slug","string","toLowerCase","docDone","getDoc","getAllCategories","getVerifiedUsers","setSelectOptions","initCategories","initStatus","initGroup","initTitle","initSlug","initContent","Editor","getSanitizingConverter","run","scroll","introTextTimeout","updateIntroText","cancel","saveIntroText","getDocStatus","saveStatus","getDocGroup","saveGroup","getDocCategories","saveCategories","getIntroText","getDocDates","saveTitle","safe_slug","slug","sanitized_slug","saveSlug","log","timeout","saveContent","getShortUrl","opngv","username","password","api","long_url","format","short_url","shorturl","categoryOptions","simple_tags","tokenSeparators","initSelection","splice","returned","unique","statusOptions","ajax","dataType","term","createSearchChoice","groupOptions","sponsorOptions","placeholde","sponsorType","statusChange","sponsorChange","groupChange","categoriesChange","kind","content","createDate","newDate","$changed","deleteDate","indexOf","saveDate","sendDate","newitem","olditem","equals","getDocSponsor","getAllStatuses","getAllGroups","saveSponsor","intro-text","admins","getAdmins","saveAdmin","saved","requests","getRequests","request","headers","config","factory","$resource","isArray","broadcastUpdate","interval","setInterval","clearInterval","$broadcast","$document","service","$modal","modalDefaults","backdrop","modalFade","templateUrl","modalOptions","closeButtonText","actionButtonText","headerText","bodyText","showModal","customModalDefaults","customModalOptions","tempModalDefaults","tempModalOptions","$modalInstance","ok","close","dismiss","open","directive","restrict","transclude","compile","scope","attrs","commentLink","client","activityItemLink","$span","$feedbackElement","closest","prevBackground","effect","color","$compile","elem","replaceWith","ngBlur","updateEmail","newEmail","newPassword","messages","template","input","len","CryptoJS","MD5","obj","map","$key","injector","ajaxPrefilter","originalOptions","jqXHR","token","crossDomain","setRequestHeader","imports","moment","locale","app","growlProvider","$httpProvider","messagesKey","messageTextKey","messageSeverityKey","onlyUniqueMessages","globalTimeToLive","$locationProvider","html5Mode","$translateProvider","translations","POSTED","UPDATED","preferredLanguage"],"mappings":"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","file":"app.js","sourcesContent":["angular.module( 'madisonApp.filters', []);","function googleTranslateElementInit() {\n  \tnew google.translate.TranslateElement({pageLanguage: 'en'}, 'google_translate_element');\n}","/*global Annotator*/\n/*global getAnnotationService*/\n/*global user*/\n/*global doc*/\n/*global diff_match_patch*/\nAnnotator.Plugin.Madison = function () {\n  Annotator.Plugin.apply(this, arguments);\n};\n\n$.extend(Annotator.Plugin.Madison.prototype, new Annotator.Plugin(), {\n  events: {},\n  options: {},\n  pluginInit: function () {\n\n    /**\n     *  Subscribe to Store's `annotationsLoaded` event\n     *    Stores all annotation objects provided by Store in the window\n     *    Adds all annotations to the sidebar\n     **/\n    this.annotator.subscribe('annotationsLoaded', function (annotations) {\n      annotations.forEach(function (annotation) {\n        annotation.highlights.forEach(function (highlight) {\n          $(highlight).attr('id', 'annotation_' + annotation.id);\n          $(highlight).attr('name', 'annotation_' + annotation.id);\n          annotation.link = 'annotation_' + annotation.id;\n        });\n      });\n\n      //Set the annotations in the annotationService\n      var annotationService = getAnnotationService();\n      annotationService.setAnnotations(annotations);\n    });\n\n    /**\n     *  Subscribe to Annotator's `annotationCreated` event\n     *    Adds new annotation to the sidebar\n     */\n    this.annotator.subscribe('annotationCreated', function (annotation) {\n      var annotationService = getAnnotationService();\n      annotationService.addAnnotation(annotation);\n      if ($.showAnnotationThanks) {\n        $('#annotationThanks').modal({\n          remote: _baseUrl + '/modals/annotation_thanks',\n          keyboard: true\n        });\n      }\n    });\n\n    this.annotator.subscribe('commentCreated', function (comment) {\n      comment = $('<div class=\"existing-comment\"><blockquote>' + comment.text + '<div class=\"comment-author\">' + comment.user.name + '</div></blockquote></div>');\n      var currentComments = $('#current-comments');\n      currentComments.append(comment);\n      currentComments.removeClass('hidden');\n\n      $('#current-comments').collapse(true);\n    });\n\n    this.annotator.subscribe('annotationViewerTextField', function (field, annotation) {\n      if(annotation.tags.length === 0){\n        return;\n      }\n\n      var showDiff = false;\n\n      annotation.tags.forEach(function (tag){\n        if(tag === 'editar'){\n          var jField = $(field);\n          var differ = new diff_match_patch();\n          var diffs = differ.diff_main(annotation.quote, annotation.text);\n          var html = differ.diff_prettyHtml(diffs);\n          jField.find('p').html(html);\n        }\n      });\n    });\n\n    //Add Madison-specific fields to the viewer when Annotator loads it\n    this.annotator.viewer.addField({\n      load: function (field, annotation) {\n        this.addNoteLink(field, annotation);\n        this.addNoteActions(field, annotation);\n        this.addComments(field, annotation);\n      }.bind(this)\n    });\n\n    this.annotator.editor.submit = function (e) {\n      //Clear previous errors\n      this.annotation._error = false;\n\n      var field, _i, _len, _ref;\n      Annotator.Util.preventEventDefault(e);\n\n      _ref = this.fields;\n\n      for (_i = 0, _len = _ref.length; _i < _len; _i++){\n        field = _ref[_i];\n        field.submit(field.element, this.annotation);\n      }\n\n      if(this.annotation._error !== true){\n        this.publish('save', [this.annotation]);\n\n        return this.hide();\n      }\n    };\n\n    this.annotator.editor.addField({\n      load: function (field, annotation) {\n        this.addEditFields(field, annotation);\n      }.bind(this),\n      submit: function(field, annotation) {\n        //check it is tagged 'edit'\n        if(this.hasEditTag(annotation.tags)){\n          //check we have explanatory content\n          var explanation = $(field).find('#explanation').val();\n\n          //If no explanatory content, show message and don't submit\n          if('' == explanation.trim()){\n            $('#annotation-error').text(\"Por favor explica por qué hiciste el cambio.\").toggle(true);\n\n            annotation._error = true;\n            return false;\n          }\n\n          annotation.explanation = explanation;\n        }\n      },\n      hasEditTag: function (tags) {\n        var hasEditTag = false;\n\n        if(tags === undefined || tags.length  === 0){\n          return false;\n        }\n\n        tags.forEach(function (tag) {\n          if (tag === 'editar') {\n            hasEditTag = true;\n          }\n        });\n\n        return hasEditTag;\n      }\n    });\n  },\n  addEditFields: function (field, annotation) {\n    var newField = $(field);\n    var toAdd = $('<div class=\"annotator-editor-edit-wrapper\"></div>');\n\n    var buttonGroup = $('<div class=\"btn-group\"></div>');\n\n    var explanation = $('<input id=\"explanation\" type=\"text\" name=\"explanation\" placeholder=\"¿Por qué editaste esto?\" style=\"display:none;\" />');\n    var annotationError = $('<p id=\"annotation-error\" style=\"display:none; color:red;\"></p>');\n\n    var annotateButton = $('<button type=\"button\" class=\"btn btn-default active\">Anotar</button>').click(function () {\n      $(this).addClass('active');\n      $(this).siblings().each(function (sibling) {\n        $(this).removeClass('active');\n      });\n      $('#annotator-field-0').val('');\n      $('#annotator-field-1').val('');\n      $('#explanation').toggle(false);\n      $('#explanation').prop('required', false);\n      $('#annotator-error').text('').toggle(false);\n      $('#annotator-field-0').focus();\n    });\n\n    var editButton = $('<button type=\"button\" class=\"btn btn-default\">Editar</button>').click(function () {\n      $(this).addClass('active');\n      $(this).siblings().each(function (sibling) {\n        $(this).removeClass('active');\n      });\n      $('#annotator-field-0').val(annotation.quote);\n      $('#annotator-field-1').val('editar');\n      $('#explanation').toggle(true);\n      $('#explanation').prop('required', true);\n      $('#annotator-field-0').focus();\n    });\n\n    buttonGroup.append(annotateButton, editButton);\n    toAdd.append(buttonGroup);\n    toAdd.append(explanation);\n    toAdd.append(annotationError);\n    newField.html(toAdd);\n  },\n  addComments: function (field, annotation) {\n    //Add comment wrapper and collapse the comment thread\n    var commentsHeader = $('<div class=\"comment-toggle\" data-toggle-\"collapse\" data-target=\"#current-comments\">Comentarios <span id=\"comment-caret\" class=\"caret caret-right\"></span></button>').click(function () {\n      $('#current-comments').collapse('toggle');\n      $('#comment-caret').toggleClass('caret-right');\n    });\n\n    //If there are no comments, hide the comment wrapper\n    if ($(annotation.comments).length === 0) {\n      commentsHeader.addClass('hidden');\n    }\n\n    //Add all current comments to the annotation viewer\n    var currentComments = $('<div id=\"current-comments\" class=\"current-comments collapse\"></div>');\n\n    /*jslint unparam: true*/\n    $.each(annotation.comments, function (index, comment) {\n      comment = $('<div class=\"existing-comment\"><blockquote>' + comment.text + '<div class=\"comment-author\">' + comment.user.name + '</div></blockquote></div>');\n      currentComments.append(comment);\n    });\n    /*jslint unparam: false*/\n\n    //Collapse the comment thread on load\n    currentComments.ready(function () {\n      $('#existing-comments').collapse({\n        toggle: false\n      });\n    });\n\n    //If the user is logged in, allow them to comment\n    if (user.id !== '') {\n      var annotationComments = $('<div class=\"annotation-comments\"></div>');\n      var commentText = $('<input type=\"text\" class=\"form-control\" />');\n      var commentSubmit = $('<button type=\"button\" class=\"btn btn-primary\" >Enviar</button>');\n      commentSubmit.click(function () {\n        this.createComment(commentText, annotation);\n      }.bind(this));\n      annotationComments.append(commentText);\n\n      annotationComments.append(commentSubmit);\n\n      $(field).append(annotationComments);\n    }\n\n    $(field).append(commentsHeader, currentComments);\n  },\n  addNoteActions: function (field, annotation) {\n    //Add actions ( like / dislike / error) to annotation viewer\n    var annotationAction = $('<div></div>').addClass('annotation-action');\n    var generalAction = $('<span></span>').addClass('glyphicon').data('annotation-id', annotation.id);\n\n    var annotationLike = generalAction.clone().addClass('glyphicon-thumbs-up').append('<span class=\"action-count\">' + annotation.likes + '</span>');\n    var annotationDislike = generalAction.clone().addClass('glyphicon-thumbs-down').append('<span class=\"action-count\">' + annotation.dislikes + '</span>');\n    var annotationFlag = generalAction.clone().addClass('glyphicon-flag').append('<span class=\"action-count\">' + annotation.flags + '</span>');\n\n    annotationAction.append(annotationLike, annotationDislike, annotationFlag);\n\n    //If user is logged in add his current action and enable the action buttons\n    if (user.id !== '') {\n      if (annotation.user_action) {\n        if (annotation.user_action === 'like') {\n          annotationLike.addClass('selected');\n        } else if (annotation.user_action === 'dislike') {\n          annotationDislike.addClass('selected');\n        } else if (annotation.user_action === 'flag') {\n          annotationFlag.addClass('selected');\n        } // else this user doesn't have any actions on this annotation\n      }\n\n      var that = this;\n\n      annotationLike.addClass('logged-in').click(function () {\n        that.addLike(annotation, this);\n      });\n\n      annotationDislike.addClass('logged-in').click(function () {\n        that.addDislike(annotation, this);\n      });\n\n      annotationFlag.addClass('logged-in').click(function () {\n        that.addFlag(annotation, this);\n      });\n    }\n\n    $(field).append(annotationAction);\n  },\n  addNoteLink: function (field, annotation) {\n    //Add link to annotation\n    var noteLink = $('<div class=\"annotation-link\"></div>');\n    var linkPath = window.location.origin + window.location.pathname + '#' + annotation.link;\n    var annotationLink = $('<a></a>').attr('href', window.location.pathname + '#' + annotation.link).text('Copiar Enlace de Anotación').addClass('annotation-permalink');\n    annotationLink.attr('data-clipboard-text', linkPath);\n\n    var client = new ZeroClipboard(annotationLink);\n\n    noteLink.append(annotationLink);\n    $(field).append(noteLink);\n  },\n  createComment: function (textElement, annotation) {\n    var text = textElement.val();\n    textElement.val('');\n\n    var comment = {\n      text: text,\n      user: user\n    };\n\n    //POST request to add user's comment\n    $.post(_baseUrl + '/api/docs/' + doc.id + '/annotations/' + annotation.id + '/comments', {\n      comment: comment\n    }, function () {\n      annotation.comments.push(comment);\n\n      return this.annotator.publish('commentCreated', comment);\n    }.bind(this));\n  },\n  addLike: function (annotation, element) {\n    $.post(_baseUrl + '/api/docs/' + doc.id + '/annotations/' + annotation.id + '/likes', function (data) {\n      element = $(element);\n      element.children('.action-count').text(data.likes);\n      element.siblings('.glyphicon').removeClass('selected');\n\n      if (data.action) {\n        element.addClass('selected');\n      } else {\n        element.removeClass('selected');\n      }\n\n      element.siblings('.glyphicon-thumbs-up').children('.action-count').text(data.likes);\n      element.siblings('.glyphicon-thumbs-down').children('.action-count').text(data.dislikes);\n      element.siblings('.glyphicon-flag').children('.action-count').text(data.flags);\n\n      annotation.likes = data.likes;\n      annotation.dislikes = data.dislikes;\n      annotation.flags = data.flags;\n      annotation.user_action = 'like';\n    });\n  },\n  addDislike: function (annotation, element) {\n    $.post(_baseUrl + '/api/docs/' + doc.id + '/annotations/' + annotation.id + '/dislikes', function (data) {\n      element = $(element);\n      element.children('.action-count').text(data.dislikes);\n      element.siblings('.glyphicon').removeClass('selected');\n\n      if (data.action) {\n        element.addClass('selected');\n      } else {\n        element.removeClass('selected');\n      }\n\n      element.siblings('.glyphicon-thumbs-up').children('.action-count').text(data.likes);\n      element.siblings('.glyphicon-thumbs-down').children('.action-count').text(data.dislikes);\n      element.siblings('.glyphicon-flag').children('.action-count').text(data.flags);\n\n      annotation.likes = data.likes;\n      annotation.dislikes = data.dislikes;\n      annotation.flags = data.flags;\n      annotation.user_action = 'dislike';\n    });\n  },\n  addFlag: function (annotation, element) {\n    $.post(_baseUrl + '/api/docs/' + doc.id + '/annotations/' + annotation.id + '/flags', function (data) {\n      element = $(element);\n      element.children('.action-count').text(data.flags);\n      element.siblings('.glyphicon').removeClass('selected');\n\n      if (data.action) {\n        element.addClass('selected');\n      } else {\n        element.removeClass('selected');\n      }\n\n      element.siblings('.glyphicon-thumbs-up').children('.action-count').text(data.likes);\n      element.siblings('.glyphicon-thumbs-down ').children('.action-count').text(data.dislikes);\n\n      annotation.likes = data.likes;\n      annotation.dislikes = data.dislikes;\n      annotation.flags = data.flags;\n      annotation.user_action = 'flag';\n    });\n  }\n});\n","angular.module( 'madisonApp.controllers' )\n    .controller( 'AnnotationController', [ '$scope', '$sce', '$http', 'annotationService', 'createLoginPopup', 'growl', '$location', '$filter', '$timeout', function ( $scope, $sce, $http, annotationService, createLoginPopup, growl, $location, $filter, $timeout ) {\n        $scope.annotations  = [];\n        $scope.supported    = null;\n        $scope.opposed      = false;\n\n        //Parse sub-comment hash if there is one\n        var hash            = $location.hash();\n        var subCommentId    = hash.match( /^annsubcomment_([0-9]+)$/ );\n        if ( subCommentId ) {\n            $scope.subCommentId = subCommentId[1];\n        }\n\n        //Watch for annotationsUpdated broadcast\n        $scope.$on('annotationsUpdated', function () {\n            angular.forEach( annotationService.annotations, function ( annotation ) {\n                if ( $.inArray( annotation, $scope.annotations ) < 0 ) {\n                    var collapsed = true;\n                    if ( $scope.subCommentId ) {\n                        angular.forEach( annotation.comments, function ( subcomment ) {\n                            if ( subcomment.id == $scope.subCommentId ) {\n                                collapsed = false;\n                            }\n                        });\n                    }\n\n                    annotation.label                = 'annotation';\n                    annotation.commentsCollapsed    = collapsed;\n                    $scope.annotations.push( annotation );\n                }\n            });\n\n            $scope.$apply();\n        });\n\n        $scope.init             = function ( docId ) {\n            $scope.user = user;\n            $scope.doc  = doc;\n        };\n        $scope.isSponsor        = function () {\n            var currentId   = $scope.user.id;\n            var sponsored   = false;\n\n            angular.forEach( $scope.doc.sponsor, function ( sponsor ) {\n                if ( currentId === sponsor.id ) {\n                    sponsored = true;\n                }\n            });\n\n            return sponsored;\n        };\n        $scope.notifyAuthor     = function ( annotation ) {\n            $http.post( '/api/docs/' + doc.id + '/annotations/' + annotation.id + '/' + 'seen' )\n                .success(function ( data ) {\n                    annotation.seen = data.seen;\n                }).error(function ( data ) {\n                    console.error( \"Unable to mark activity as seen: %o\", data );\n                });\n        };\n        $scope.getDocComments   = function ( docId ) {\n            $http({\n                method  : 'GET',\n                url     : '/api/docs/' + docId + '/comments'\n            })\n            .success( function ( data ) {\n                angular.forEach( data, function ( comment ) {\n                    var collapsed = false;\n                    if ( $scope.subCommentId ) {\n                        angular.forEach( comment.comments, function ( subcomment ) {\n                            if ( subcomment.id == $scope.subCommentId ) {\n                                collapsed = false;\n                            }\n                        });\n                    }\n\n                    comment.commentsCollapsed   = collapsed;\n                    comment.label               = 'comment';\n                    comment.link                = 'comment_' + comment.id;\n                    $scope.annotations.push( comment );\n                });\n            })\n            .error( function ( data ) {\n                console.error( \"Error loading comments: %o\", data );\n            });\n        };\n        $scope.commentSubmit    = function () {\n            var comment     = angular.copy( $scope.comment );\n            comment.user    = $scope.user;\n            comment.doc     = $scope.doc;\n\n            $http.post( '/api/docs/' + comment.doc.id + '/comments', {\n                'comment'   : comment\n                })\n                .success( function () {\n                    comment.label       = 'comment';\n                    comment.user.fname  = comment.user.name;\n                    $scope.stream.push( comment );\n                    $scope.comment.text = '';\n\n                    feedbackMessage( '<b>¡Gracias!</b> Acabas de agregar un comentario', 'success', '#participate-activity-message' );\n                })\n                .error( function ( data ) {\n                    console.error( \"Error posting comment: %o\", data );\n                });\n        };\n        $scope.activityOrder    = function ( activity ) {\n            var popularity  = activity.likes - activity.dislikes;\n\n            return popularity;\n        };\n        $scope.addAction        = function ( activity, action, $event ) {\n            if ( $scope.user.id !== '' ) {\n                $http.post( '/api/docs/' + $scope.doc.id + '/' + activity.label + 's/' + activity.id + '/' + action )\n                    .success( function ( data ) {\n                        activity.likes      = data.likes;\n                        activity.dislikes   = data.dislikes;\n                        activity.flags      = data.flags;\n                    }).error( function ( data ) {\n                        console.error( data );\n                    });\n            } else {\n              createLoginPopup($event);\n            }\n        };\n        $scope.collapseComments = function ( activity ) {\n            activity.commentsCollapsed  = !activity.commentsCollapsed;\n        };\n        $scope.subcommentSubmit = function ( activity, subcomment ) {\n            if ( $scope.user.id === '' ) {\n                var focused = document.activeElement;\n\n                if ( document.activeElement == document.body ) {\n                    pageY   = $( window ).scrollTop() + 300;\n                    clientX = $( window ).width() / 2 - 100;\n                } else {\n                    pageY   = $( focused ).offset().top;\n                    clientX = $( focused ).offset().left;\n                }\n\n                createLoginPopup( jQuery.Event( \"click\", {\n                    clientX : clientX,\n                    pageY   : pageY \n                }));\n                return;\n            }\n\n            subcomment.user = $scope.user;\n\n            $.post( _baseUrl + '/api/docs/' + $scope.doc.id + '/' + activity.label + 's/' + activity.id + '/comments', {\n                    'comment'   : subcomment\n                })\n                .success( function ( data ) {\n                    activity.comments.push( data );\n                    subcomment.text = '';\n                    subcomment.user = '';\n                    $scope.$apply();\n\n                    feedbackMessage( '<b>¡Gracias!</b> Acabas de agregar un comentario', 'success', '#participate-activity-message' );\n                }).error( function ( data ) {\n                    console.error( data );\n                });\n        };\n    }]);","angular.module('madisonApp.controllers')\n  .controller('AppController', ['$rootScope', '$scope', 'UserService', function ($rootScope, $scope, UserService) {\n    // Update page title\n    $rootScope.$on('$routeChangeSuccess', function (event, current, previous) {\n      $rootScope.pageTitle = current.$$route.title;\n    });\n\n    // Watch for user data change\n    $scope.$on('userUpdated', function () {\n      $scope.user = UserService.user;\n    });\n\n    // Load user data\n    UserService.getUser();\n  }]);\n","angular.module( 'madisonApp.controllers' )\n    .controller( 'CommentController', [ '$scope', '$sce', '$http', 'annotationService', 'createLoginPopup', 'growl', '$location', '$filter', '$timeout', function ( $scope, $sce, $http, annotationService, createLoginPopup, growl, $location, $filter, $timeout ) {\n        $scope.comments             = [];\n        $scope.supported            = null;\n        $scope.opposed              = false;\n        $scope.collapsed_comment    = {};\n\n      // Parse comment/subcomment direct links\n        var hash            = $location.hash();\n        var subCommentId    = hash.match( /(sub)?comment_([0-9]+)$/ );\n        if ( subCommentId ) {\n            $scope.subCommentId = subCommentId[2];\n        }\n\n        $scope.init             = function ( docId, disableAuthor, disableCommentAction ) {\n            $scope.getDocComments( docId );\n            $scope.user                 = user;\n            $scope.doc                  = doc;\n            $scope.disableAuthor        = ( typeof disableAuthor !== 'undefined' );\n            $scope.disableCommentAction = ( typeof disableCommentAction !== 'undefined' );\n            $scope.getLayoutTexts();\n        };\n        $scope.isSponsor        = function ( userId ) {\n            var currentId   = userId || $scope.user.id;\n            var sponsored   = false;\n\n            angular.forEach( $scope.doc.sponsor, function ( sponsor ) {\n                if ( currentId === sponsor.id ) {\n                    sponsored = true;\n                }\n            });\n\n            return sponsored;\n        };\n        $scope.notifyAuthor     = function ( activity ) {\n            // If the current user is a sponsor and the activity hasn't been seen yet,\n            // post to API route depending on comment/annotation label\n            $http.post(_baseUrl + '/api/docs/' + doc.id + '/' + 'comments/' + activity.id + '/' + 'seen' )\n                .success( function ( data ) {\n                    activity.seen = data.seen;\n                }).error( function ( data ) {\n                    console.error( \"Unable to mark activity as seen: %o\", data );\n                });\n        };\n        $scope.getLayoutTexts   = function() {\n            var texts = {\n                    common  : {\n                        header                      : '',\n                        callToAction                : '',\n                        commentLabel                : 'Agrega un comentario:',\n                        commentPlaceholder          : 'Agregar un comentario',\n                        subCommentPlaceholder       : 'Agregar un comentario',\n                        commentfeedbackMessage      : '<b>¡Gracias!</b> Acabas de agregar un comentario',\n                        subCommentfeedbackMessage   : '<b>¡Gracias!</b> Acabas de agregar un comentario',\n                        privateComment              : 'Comentario privado',\n                        sendComment                 : 'Enviar'\n                    },\n                    ieda    : {\n                        header                      : 'Categorías de Datos Abiertos propuestos',\n                        callToAction                : 'Vota por los conjuntos de datos que te interesan',\n                        commentLabel                : 'Sugiere otra categoría:',\n                        commentPlaceholder          : 'Sugiere otra categoría',\n                        subCommentPlaceholder       : 'Sugiere otro conjunto',\n                        commentfeedbackMessage      : '<b>¡Gracias!</b> Acabas de sugerir una categoría',\n                        subCommentfeedbackMessage   : '<b>¡Gracias!</b> Acabas de sugerir un conjunto de datos',\n                        privateComment              : 'Categoría privada',\n                        sendComment                 : 'Enviar'\n                    },\n                    planAGA : {\n                        header                      : 'Temas para el Tercer Plan de Acción de la Alianza para el Gobierno Abierto',\n                        callToAction                : 'Vota y comenta los temas que más te interesan.',\n                        commentLabel                : 'Sugiere otro tema:',\n                        commentPlaceholder          : 'Sugiere otro tema',\n                        subCommentPlaceholder       : 'Sugiere otro subtema',\n                        commentfeedbackMessage      : '<b>¡Gracias!</b> Acabas de sugerir un tema',\n                        subCommentfeedbackMessage   : '<b>¡Gracias!</b> Acabas de sugerir un subtema',\n                        privateComment              : 'Tema privado',\n                        sendComment                 : 'Enviar'\n                    },\n                    cofemer : {\n                        header                      : '',\n                        callToAction                : '',\n                        commentLabel                : 'Agrega tu comentario:',\n                        commentPlaceholder          : 'Agrega tu comentario',\n                        subCommentPlaceholder       : 'Agrega tu comentario',\n                        commentfeedbackMessage      : '<b>¡Gracias!</b> Acabas de agregar un comentario',\n                        subCommentfeedbackMessage   : '<b>¡Gracias!</b> Acabas de agregar un comentario',\n                        privateComment              : 'Comentario privado',\n                        sendComment                 : 'Enviar'\n                    }\n                };\n\n            $scope.layoutTexts  = texts.common;\n            angular.forEach( $scope.doc.doc_layouts, function ( category ) {\n                if ( texts[category.name] !== undefined )\n                    $scope.layoutTexts  = texts[category.name];\n            });\n        };\n        $scope.getDocComments   = function ( docId ) {\n            // Get all doc comments, regardless of nesting level\n            $http({\n                method  : 'GET',\n                url     : _baseUrl + '/api/docs/' + docId + '/comments'\n            })\n                .success( function ( data ) {\n                    // Build child-parent relationships for each comment\n                    angular.forEach( data, function ( comment ) {\n                        // If this isn't a parent comment, we need to find the parent and push this comment there\n                        if ( comment.parent_id !== null ) {\n                            var parent  = $scope.parentSearch( data, comment.parent_id );\n                            comment.parentpointer   = data[parent];\n                            data[parent].comments.push( comment );\n                        }\n\n                        // If this is the comment being linked to, save it\n                        if ( comment.id == $scope.subCommentId ) {\n                            $scope.collapsed_comment = comment;\n                        }\n\n                        comment.commentsCollapsed   = true;\n                        comment.label               = 'comment';\n                        comment.link                = 'comment_' + comment.id;\n\n                        // We only want to push top-level comments, they will include subcomments in their comments array(s)\n                        if ( comment.parent_id === null ) {\n                            $scope.comments.push( comment );\n                        }\n                    });\n\n                    // If we are linking directly to a comment, we need to expand comments\n                    if ( $scope.subCommentId ) {\n                        var not_parent = true;\n                        // Expand comments, moving up towards the parent, until all are expanded\n                        do {\n                            $scope.collapsed_comment.commentsCollapsed  = false;\n                            if ( $scope.collapsed_comment.parent_id !== null ) {\n                                $scope.collapsed_comment    = $scope.collapsed_comment.parentpointer;\n                            } else {\n                                // We have reached the first sublevel of comments, so set the top level\n                                // parent to expand and exit\n                                not_parent  = false;\n                            }\n                        } while ( not_parent === true );\n                    }\n                }).error( function ( data ) {\n                    console.error( \"Error loading comments: %o\", data );\n                });\n        };\n        $scope.parentSearch     = function ( arr, val ) {\n            for ( var i = 0; i < arr.length; i++ )\n                if ( arr[i].id === val )\n                    return i;\n                return false;\n        };\n        $scope.commentSubmit    = function () {\n            var comment     = angular.copy( $scope.comment );\n            comment.user    = $scope.user;\n            comment.doc     = $scope.doc;\n\n            $http.post(_baseUrl + '/api/docs/' + comment.doc.id + '/comments', {\n                'comment': comment\n            })\n                .success( function ( data ) {\n                    data[0].label   = 'comment';\n                    $scope.comments.push( data[0] );\n                    $scope.comment.text = '';\n\n                    feedbackMessage( $scope.layoutTexts.commentfeedbackMessage, 'success', '#participate-comment-message' );\n                })\n                .error( function ( data ) {\n                    console.error( \"Error posting comment: %o\", data );\n                });\n        };\n        $scope.activityOrder    = function ( activity ) {\n            var popularity  = activity.likes - activity.dislikes;\n\n            return popularity;\n        };\n        $scope.addAction        = function ( activity, action, $event ) {\n            if ( $scope.user.id !== '' ) {\n                $http.post(_baseUrl + '/api/docs/' + $scope.doc.id + '/' + activity.label + 's/' + activity.id + '/' + action )\n                    .success( function ( data ) {\n                        activity.likes  = data.likes;\n                        activity.dislikes   = data.dislikes;\n                        activity.flags      = data.flags;\n                        activity.deleted_at = data.deleted_at;\n                    }).error( function ( data ) {\n                        console.error( data );\n                    });\n            } else {\n              createLoginPopup($event);\n            }\n        };\n        $scope.collapseComments = function ( activity ) {\n            activity.commentsCollapsed = !activity.commentsCollapsed;\n        };\n        $scope.subcommentSubmit = function ( activity, subcomment ) {\n            if ( $scope.user.id === '' ) {\n                var focused = document.activeElement;\n\n                if ( document.activeElement == document.body ) {\n                    pageY   = $( window ).scrollTop() + 300;\n                    clientX = $( window ).width() / 2 - 100;\n                } else {\n                    pageY   = $( focused ).offset().top;\n                    clientX = $( focused ).offset().left;\n                }\n\n                createLoginPopup( jQuery.Event( \"click\", {\n                    clientX : clientX,\n                    pageY   : pageY\n                }));\n                return;\n            }\n\n            subcomment.user = $scope.user;\n\n            $.post(_baseUrl + '/api/docs/' + $scope.doc.id + '/' + activity.label + 's/' + activity.id + '/comments', {\n                'comment': subcomment\n            })\n                .success( function ( data ) {\n                    data.comments   = [];\n                    data.label      = 'comment';\n                    activity.comments.push( data );\n                    subcomment.text = '';\n                    subcomment.user = '';\n                    $scope.$apply();\n\n                    feedbackMessage( $scope.layoutTexts.subCommentfeedbackMessage, 'success', '#participate-comment-message' );\n            }).error( function ( data ) {\n                console.error( data );\n            });\n        };\n    }]);\n","angular.module('madisonApp.controllers')\n  .controller('DocumentPageController', ['$scope', '$cookies', '$location', 'Doc', '$sce', function ($scope, $cookies, $location, Doc, $sce) {\n    $scope.hideIntro = $cookies.hideIntro;\n\n    // Check which tab needs to be active - if the location hash\n    // is #annsubcomment or there is no hash, the annotation/bill tab needs to be active\n    // Otherwise, the hash is #subcomment/#comment and the discussion tab should be active\n    var annotationHash = $location.hash().match(/^annsubcomment_([0-9]+)$/);\n    $scope.secondtab = false;\n\n    if (!annotationHash && ($location.hash())) {\n      $scope.secondtab = true;\n    }\n\n    $scope.hideHowToAnnotate    = function () {\n      $cookies.hideIntro = true;\n      $scope.hideIntro   = true;\n    };\n\n    $scope.doc  = Doc.get({\n      id  : doc.id\n    }, function () {\n      //If intro text exists, convert & trust the markdown content\n      if(undefined !== $scope.doc.introtext[0]){\n          var converter    = new Markdown.Converter();\n          $scope.introtext = $sce.trustAsHtml(converter.makeHtml($scope.doc.introtext[0].meta_value));\n      }\n    });\n  }]);\n","angular.module( 'madisonApp.controllers' )\n    .controller( 'DocumentTocController', [ '$scope', function ( $scope ) {\n        $scope.headings = [];\n\n        // For now, we use the simplest possible method to render the TOC -\n        // just scraping the content.  We could use a real API callback here\n        // later if need be.  A huge stack of jQuery follows.\n        var headings    = $( '#doc_content' ).find( 'h1,h2,h3,h4,h5,h6' );\n\n        if( headings.length > 0 ) {\n            headings.each( function( i, elm ) {\n                elm = $( elm );\n                // Set an arbitrary id.\n                // TODO: use a better identifier here - preferably a title-based slug\n                if( !elm.attr( 'id' ) ) {\n                    elm.attr( 'id', 'heading-' + i );\n                }\n                elm.addClass( 'anchor' );\n                $scope.headings.push( {\n                    'title' : elm.text(),\n                    'tag'   : elm.prop( 'tagName' ),\n                    'link'  : elm.attr( 'id' )\n                });\n            });\n        } else {\n            $( '#toc-column' ).remove();\n            var container   = $( '#content' ).parent();\n            container.removeClass( 'col-md-6' );\n            container.addClass( 'col-md-9' );\n        }\n    }]);","angular.module('madisonApp.controllers')\n  .controller('EmailSubscribeController', ['$scope', '$http', function ($scope, $http) {\n    $scope.email = '';\n    $scope.successMessage = false;\n    $scope.subscribeEmail = function () {\n      $http.post('http://www.gob.mx/subscribe', { email: $scope.email })\n        .success(function (data) {\n          $scope.successMessage = true;\n        }).error(function (data) {\n          console.error( \"Unable to mark activity as seen: %o\", data );\n        });\n    };\n  }]);\n","angular.module('madisonApp.controllers')\n  .controller('HomePageController', ['$scope', '$location', '$http', '$filter', '$cookies', 'Doc', function ($scope, $location, $http, $filter, $cookies, Doc) {\n    var refEl     = $('.main-banner'),\n        search    = $location.search(),\n        page      = (search.page) ? search.page : 1,\n        limit     = (search.limit) ? search.limit : 20,\n        docSearch = (search.q) ? search.q : '';\n        docFilter = (search.mode) ? search.mode : '';\n        docOrder  = (search.date) ? search.date : '';\n\n    var fetchDocs = function() {\n      $scope.docs     = Array();\n      $scope.updating = true;\n\n      var params = {\n        q: docSearch,\n        filter: docFilter,\n        order: docOrder,\n        page: page,\n        per_page: limit\n      };\n\n      params = _.pick(params, function(value, key, object) {\n        return value !== '';\n      });\n\n      Doc.query(params, function (data) {\n        $scope.totalDocs = data.pagination.count;\n        $scope.perPage   = data.pagination.per_page;\n        $scope.page      = data.pagination.page;\n        $scope.updating  = false;\n        $scope.docs      = data.results;\n      }).$promise.catch(function (data) {\n        console.error(\"Unable to get documents: %o\", data);\n      });\n    };\n\n    $(function() {\n      $('#home-select2-filter').select2({\n        placeholder: \"Categoría, autor o estatus\",\n        allowClear: true\n      });\n      $('#home-select2-order').select2({\n        placeholder: \"Fecha\",\n        allowClear: true\n      });\n    });\n\n    $scope.docs      = [];\n    $scope.reverse   = true;\n    $scope.startStep = 0;\n    $scope.updating  = false;\n    $scope.docSearch = docSearch;\n    $scope.docFilter = docFilter;\n    $scope.docOrder  = docOrder;\n\n    $scope.paginate = function () {\n      if ($scope.page > 1) {\n        $location.search(\"page\", $scope.page);\n      } else {\n        $location.search(\"page\", null);\n      }\n\n      page = $scope.page;\n\n      // Scroll to the top of the list\n      $('html, body').animate({\n        scrollTop : refEl.offset().top + refEl.height()\n      }, 500 );\n\n      fetchDocs();\n    };\n\n    $scope.search = function () {\n      if ($scope.docSearch) {\n        $location.search(\"q\", $scope.docSearch);\n      } else {\n        $location.search(\"q\", null);\n      }\n\n      if ($scope.docFilter) {\n        $location.search(\"filter\", $scope.docFilter);\n      } else {\n        $location.search(\"filter\", null);\n      }\n\n      if ($scope.docOrder) {\n        $location.search(\"order\", $scope.docOrder);\n      } else {\n        $location.search(\"order\", null);\n      }\n\n      docSearch = $scope.docSearch;\n      docFilter = $scope.docFilter;\n      docOrder = $scope.docOrder;\n      fetchDocs();\n    };\n\n    // $scope.parseDocs = function (docs) {\n    //     angular.forEach(docs, function (doc) {\n    //         $scope.docs.unshift(doc);\n    //\n    //         angular.forEach(doc.dates, function (date) {\n    //             date.date = Date.parse(date.date);\n    //         });\n    //     });\n    // };\n\n    fetchDocs();\n  }]);\n","angular.module('madisonApp.controllers')\n  .controller('ReaderController', ['$scope', '$http', 'annotationService', 'createLoginPopup', '$timeout', '$anchorScroll', function ($scope, $http, annotationService, createLoginPopup, $timeout, $anchorScroll) {\n    var presentePlural = function(howMany) { return howMany == 1 ? '' : 'n'; };\n\n    var howManySupport = function(howMany, doesSupport) {\n      var verb = doesSupport ? ' apoya' : ' se opone';\n      return howMany + verb + presentePlural(howMany);\n    };\n\n    $scope.annotations = [];\n    $scope.$on('annotationsUpdated', function () {\n      $scope.annotations = annotationService.annotations;\n      $scope.$apply();\n\n      $timeout(function () {\n        $anchorScroll();\n      }, 0);\n    });\n\n    $scope.init         = function () {\n      $scope.user = user;\n      $scope.doc  = doc;\n      //$scope.setSponsor();\n      $scope.getSupported();\n\n      // Dates do not arrive in proper ISO 8601 format, e.g. 2015-01-14 03:27:04\n      // But by adding the T we get timezone +00:00, same as in the HomeController\n      // Then we parse it to get \"seconds since epoch\" which is needed by the date filter\n      $scope.doc.created_at = Date.parse($scope.doc.created_at.replace(' ', 'T'));\n      $scope.doc.updated_at = Date.parse($scope.doc.updated_at.replace(' ', 'T'));\n    };\n    $scope.setSponsor   = function () {\n      try {\n        if ($scope.doc.group_sponsor.length !== 0) {\n          $scope.doc.sponsor  = $scope.doc.group_sponsor;\n        } else {\n          $scope.doc.sponsor  = $scope.doc.user_sponsor;\n          $scope.doc.sponsor[0].display_name = $scope.doc.sponsor[0].fname + ' ' + $scope.doc.sponsor[0].lname;\n        }\n      } catch (err) {\n        console.error(err);\n      }\n    };\n    $scope.getSupported = function () {\n      if ($scope.user.id !== '') {\n      $http.get(_baseUrl + '/api/users/support/' + $scope.doc.id)\n        .success(function (data) {\n          switch (data.support) {\n            case \"1\":\n              $scope.supported    = true;\n              break;\n            case \"\":\n              $scope.opposed      = true;\n              break;\n            default:\n              $scope.supported    = null;\n              $scope.opposed      = null;\n          }\n\n          if ($scope.supported !== null && $scope.opposed !== null) {\n            $('#doc-support').text(howManySupport(data.supports, true));\n            $('#doc-oppose').text(howManySupport(data.opposes, false));\n          }\n        }).error(function () {\n          console.error(\"Unable to get support info for user %o and doc %o\", $scope.user, $scope.doc);\n        });\n      }\n    };\n    $scope.support = function (supported, $event) {\n      if ($scope.user.id === '') {\n        createLoginPopup($event);\n      } else {\n        $http.post(_baseUrl + '/api/users/support/' + $scope.doc.id, {\n          'support': supported\n        })\n        .success(function (data) {\n          //Parse data to see what user's action is currently\n          if (data.support === null) {\n            $scope.supported    = false;\n            $scope.opposed      = false;\n          } else {\n            $scope.supported    = data.support;\n            $scope.opposed      = !data.support;\n          }\n\n          var button      = $($event.target);\n          var otherButton = $($event.target).siblings('a.btn');\n\n          if (button.hasClass('doc-support')) {\n            button.text(howManySupport(data.supports, true));\n            otherButton.text(howManySupport(data.opposes, false));\n          } else {\n            button.text(howManySupport(data.opposes, false));\n            otherButton.text(howManySupport(data.supports, true));\n          }\n        })\n        .error(function (data) {\n          console.error(\"Error posting support: %o\", data);\n        });\n      }\n    };\n\n    $(document).ready(function () {\n      var annotator;\n      var popup;\n\n      function attach_handlers() {\n        $('html').on('click.popup', function () {\n          $('.popup').remove();\n\n          $('html').off('click.popup');\n        });\n      }\n\n      function ajaxify_form(inForm, callback) {\n        var form = $(inForm);\n        form.submit(function (e) {\n          e.preventDefault();\n\n          $.post(form.attr('action'), form.serialize(), function (response) {\n\n            if (response.errors && Object.keys(response.errors).length) {\n              var error_html = $('<ul></ul>');\n\n              /*jslint unparam: true*/\n              angular.forEach(response.errors, function (value, key) {\n                error_html.append('<li>' + value + '</li>');\n              });\n              /*jslint unparam: false*/\n\n              form.find('.errors').html(error_html);\n            } else {\n              callback(response);\n            }\n          });\n\n        });\n      }\n\n      $('.affix-elm').each(function(i, elm) {\n        elm = $(elm);\n        var elmtop = 0;\n        if(elm.data('offset-top')){\n          elmtop = elm.data('offset-top');\n        }\n        var elmbottom = 0;\n        if(elm.data('offset-bottom')){\n          elmbottom = elm.data('offset-bottom');\n        }\n\n        elm.affix({\n          offset: {\n            top: elmtop,\n            bottom: elmbottom\n          }\n        });\n      });\n\n      if (user.id === '') {\n\n        Annotator.prototype.checkForEndSelection = function (event) {\n\n          // This is what normally happens.\n          var container, range, _k, _len2, _ref1;\n          this.mouseIsDown = false;\n\n          if (this.ignoreMouseup || $('.popup').length) {\n            return;\n          }\n          this.selectedRanges = this.getSelectedRanges();\n          _ref1 = this.selectedRanges;\n          for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {\n            range = _ref1[_k];\n            container = range.commonAncestor;\n            if ($(container).hasClass(\"annotator-hl\")) {\n              container = $(container).parents(\"[class!=annotator-hl]\")[0];\n            }\n            if (this.isAnnotator(container)) {\n              return;\n            }\n          }\n          if (event && this.selectedRanges.length) {\n            // But we diverge from the norm here.\n\n            if (event !== null) {\n              event.preventDefault();\n            }\n\n            popup = $('<div class=\"popup unauthed-popup\"><p>Ingresa para comentar.</p>' +\n              '<input type=\"button\" id=\"login\" value=\"Ingresar\" class=\"btn btn-primary\"/>' +\n              '<input type=\"button\" id=\"signup\" value=\"Registrarse\" class=\"btn btn-primary\" /></div>');\n\n            popup.on('click.popup', function (event) {\n              event.stopPropagation();\n            });\n\n            $('#login', popup).click(function (event) {\n              event.stopPropagation();\n              event.preventDefault();\n\n              $.get(_baseUrl + '/api/auth/login', {}, function (data) {\n                data = $(data);\n\n                ajaxify_form(data.find('form'), function () {\n                  $('html').trigger('click.popup');\n\n                  location.reload(false);\n                });\n\n                popup.html(data);\n              });\n            });\n\n            $('#signup', popup).click(function (event) {\n              event.stopPropagation();\n              event.preventDefault();\n\n              $.get(_baseUrl + '/api/auth/signup', {}, function (data) {\n                data = $(data);\n\n                ajaxify_form(data.find('form'), function (result) {\n                  $('html').trigger('click.popup');\n                  alert(result.message);\n                });\n\n                popup.html(data);\n              });\n            });\n\n            $('body').append(popup);\n\n            var position = {\n              'top': event.pageY - popup.height(),\n              'left': event.clientX\n            };\n            popup.css(position).css('position', 'absolute');\n\n            this.ignoreMouseup = false;\n            setTimeout(attach_handlers, 50);\n          }\n\n        };\n      }\n\n      annotator = $('#doc_content').annotator({\n        //readOnly: user.id == ''\n      });\n\n      annotator.annotator('addPlugin', 'Unsupported');\n      annotator.annotator('addPlugin', 'Tags');\n      annotator.annotator('addPlugin', 'Markdown');\n      annotator.annotator('addPlugin', 'Store', {\n        annotationData: {\n          'uri': window.location.pathname,\n          'comments': []\n        },\n        prefix: _baseUrl + '/api/docs/' + doc.id + '/annotations',\n        urls: {\n          create: '',\n          read: '/:id',\n          update: '/:id',\n          destroy: '/:id',\n          search: '/search'\n        }\n      });\n\n      annotator.annotator('addPlugin', 'Permissions', {\n        user: user,\n        permissions: {\n          'read': [],\n          'update': [user.id],\n          'delete': [user.id],\n          'admin': [user.id]\n        },\n        showViewPermissionsCheckbox: false,\n        showEditPermissionsCheckbox: false,\n        userId: function (user) {\n          if (user && user.id) {\n            return user.id;\n          }\n\n          return user;\n        },\n        userString: function (user) {\n          if (user && user.name) {\n            return user.name;\n          }\n\n          return user;\n        }\n      });\n\n      annotator.annotator('addPlugin', 'Madison', {\n        userId: user.id\n      });\n    });\n  }]);\n","angular.module( 'madisonApp.controllers' )\n    .controller( 'UserNotificationsController', [ '$scope', '$http', 'UserService', function ( $scope, $http, UserService ) {\n        //Wait for AppController controller to load user\n        UserService.exists.then(function () {\n            $http.get( '/api/user/' + $scope.user.id + '/notifications' )\n                .success( function ( data ) {\n                    $scope.notifications    = data;\n                }).error( function ( data ) {\n                    console.error( \"Error loading notifications: %o\", data );\n                });\n        });\n\n        //Watch for notification changes\n        $scope.$watch( 'notifications', function ( newValue, oldValue ) {\n            if ( oldValue !== undefined ) {\n                //Save notifications\n                $http.put('/api/user/' + $scope.user.id + '/notifications', {\n                            notifications   : newValue\n                        })\n                    .success( function ( data ) {\n                        //Do nothing?\n                    }).error( function ( data ) {\n                        console.error( \"Error updating notification settings: %o\", data );\n                    });\n            }\n        }, true );\n    }]);","angular.module( 'madisonApp.controllers' )\n    .controller( 'UserPageController', [ '$scope', '$http', '$location', function ( $scope, $http, $location ) {\n        $scope.user         = {};\n        $scope.meta         = '';\n        $scope.docs         = [];\n        $scope.activities   = [];\n        $scope.verified     = false;\n\n        $scope.init             = function () {\n            $scope.getUser();\n        };\n        $scope.getUser          = function () {\n            var abs = $location.absUrl();\n            var id  = abs.match( /.*\\/(\\d+)$/ );\n            id      = id[1];\n\n            $http.get( '/api/user/' + id )\n                .success( function ( data ) {\n                    $scope.user = angular.copy( data );\n                    $scope.meta = angular.copy( data.user_meta );\n\n                    angular.forEach( data.docs, function ( doc ) {\n                        $scope.docs.push( doc );\n                    });\n                    angular.forEach( data.comments, function ( comment ) {\n                        comment.label   = 'comment';\n                        $scope.activities.push( comment );\n                    });\n                    angular.forEach( data.annotations, function ( annotation ) {\n                        annotation.label    = 'annotation';\n                        $scope.activities.push( annotation );\n                    });\n                    angular.forEach( $scope.user.user_meta, function ( meta ) {\n                        var cont = true;\n\n                        if ( meta.meta_key === 'verify' && meta.meta_value === 'verified' && cont ) {\n                            $scope.verified = true;\n                            cont = false;\n                        }\n                    });\n                }).error( function ( data ) {\n                    console.error( \"Unable to retrieve user: %o\", data );\n                });\n        };\n        $scope.showVerified     = function () {\n            if ( $scope.user.docs && $scope.user.docs.length > 0 ) {\n                return true;\n            }\n\n            return false;\n        };\n        $scope.activityOrder    = function ( activity ) {\n            return Date.parse( activity.created_at );\n        };\n    }]);","angular.module('madisonApp.dashboardControllers')\n    .controller('DashboardDocumentsController', ['$scope', '$http', '$filter', function ($scope, $http, $filter) {\n        $scope.docs         = [];\n        $scope.categories   = [];\n        $scope.sponsors     = [];\n        $scope.statuses     = [];\n        $scope.dates        = [];\n        $scope.dateSort     = '';\n        $scope.select2      = '';\n        $scope.docSort      = \"created_at\";\n        $scope.reverse      = true;\n\n        $scope.select2Config    = {\n            multiple    : true,\n            allowClear  : true,\n            placeholder : \"Filter documents by category, sponsor, or status\"\n        };\n        $scope.dateSortConfig   = {\n            allowClear  : true,\n            placeholder : \"Sort By Date\"\n        };\n\n        //Retrieve all docs\n        $http.get(_baseUrl + '/api/docs')\n            .success(function (data) {\n              $scope.parseDocs(data.results);\n            })\n            .error(function (data) {\n                console.error(\"Unable to get documents: %o\", data);\n            });\n        $scope.parseDocs    = function (docs) {\n            angular.forEach(docs, function ( doc) {\n                $scope.docs.push(doc);\n                $scope.parseDocMeta(doc.categories, 'categories');\n                $scope.parseDocMeta(doc.sponsor, 'sponsors');\n                $scope.parseDocMeta(doc.statuses, 'statuses');\n\n                angular.forEach(doc.dates, function (date) {\n                    date.date   = Date.parse(date.date);\n                });\n            });\n        };\n        $scope.parseDocMeta = function (collection, name) {\n            if (collection === undefined || collection.length === 0) {\n                return;\n            }\n\n            angular.forEach(collection, function ( item) {\n                var found = $filter('getById')($scope[name], item.id);\n\n                if (found === null) {\n                    switch (name) {\n                        case 'categories':\n                            $scope.categories.push(item);\n                            break;\n                        case 'sponsors':\n                            $scope.sponsors.push(item );\n                            break;\n                        case 'statuses':\n                            $scope.statuses.push(item);\n                            break;\n                        default:\n                            console.error('Unknown meta name: ' + name);\n                    }\n                }\n            });\n        };\n        $scope.docFilter    = function (doc) {\n            var show = false;\n\n            if ($scope.select2 !== undefined && $scope.select2 !== '') {\n                var cont    = true;\n                var select2 = $scope.select2.split('_');\n                var type    = select2[0];\n                var value   = parseInt(select2[1], 10);\n\n                switch ( type) {\n                    case 'category':\n                        angular.forEach(doc.categories, function (category) {\n                            if (   +category.id === value && cont) {\n                                show    = true;\n                                cont    = false;\n                            }\n                        });\n                        break;\n                    case 'sponsor':\n                        angular.forEach(doc.sponsor, function (sponsor) {\n                            if (+sponsor.id === value && cont) {\n                                show    = true;\n                                cont    = false;\n                            }\n                        });\n                        break;\n                    case 'status':\n                        angular.forEach(doc.statuses, function ( status) {\n                            if (+status.id === value && cont) {\n                                show    = true;\n                                cont    = false;\n                            }\n                        });\n                        break;\n                }\n            } else {\n                show    = true;\n            }\n\n            return show;\n        };\n    }]);\n","angular.module('madisonApp.dashboardControllers')\n    .controller('DashboardEditorController', [ '$scope', '$http', '$timeout', '$location', '$filter', 'growl', function ($scope, $http, $timeout, $location, $filter, growl) {\n        $scope.doc                  = {};\n        $scope.sponsor              = {};\n        $scope.group                = {};\n        $scope.status               = {};\n        $scope.newdate              = {\n            label   : '',\n            date    : new Date()\n        };\n        $scope.verifiedUsers        = [];\n        $scope.categories           = [0];\n        $scope.introtext            = \"\";\n        $scope.suggestedCategories  = [];\n        $scope.suggestedStatuses    = [];\n        $scope.suggestedGroups      = [];\n        $scope.dates                = [];\n\n        $scope.init             = function () {\n            var abs = $location.absUrl();\n            var id  = abs.match(/.*\\/(\\d+)$/)[1];\n\n            function clean_slug( string) {\n                return string.toLowerCase().replace(/[^a-zA-Z0-9\\- ]/g, '').replace(/ +/g, '-');\n            }\n\n            var docDone = $scope.getDoc(id);\n\n            $scope.getAllCategories();\n            $scope.getVerifiedUsers();\n            $scope.setSelectOptions();\n\n            var initCategories  = true;\n            var initIntroText   = true;\n            var initSponsor     = true;\n            var initStatus      = true;\n            var initGroup       = true;\n            var initTitle       = true;\n            var initSlug        = true;\n            var initContent     = true;\n\n            docDone.then(function () {\n                new Markdown.Editor(Markdown.getSanitizingConverter()).run();\n\n                // We don't control the pagedown CSS, and this DIV needs to be scrollable\n                $(\"#wmd-preview\").css(\"overflow\", \"scroll\");\n                // Resizing dynamically according to the textarea is hard, so just set the height once (22 is padding)\n                $(\"#wmd-preview\").css(\"height\", ($(\"#wmd-input\").height() + 22));\n                $(\"#wmd-input\").scroll(function () {\n                    $(\"#wmd-preview\").scrollTop($(\"#wmd-input\").scrollTop());\n                });\n\n                //Save intro text after a 3 second timeout\n                var introTextTimeout    = null;\n                $scope.updateIntroText  = function ( newValue) {\n                    if(introTextTimeout) {\n                        $timeout.cancel(introTextTimeout);\n                    }\n                    introTextTimeout    = $timeout(function () {\n                        $scope.saveIntroText(newValue );\n                    }, 3000);\n                };\n\n                // $scope.getDocSponsor().then(function () {\n                //     $scope.$watch('sponsor', function () {\n                //         if (initSponsor) {\n                //             $timeout(function () {\n                //                 initSponsor = false;\n                //             });\n                //         } else {\n                //             $scope.saveSponsor();\n                //         }\n                //     });\n                // });\n                $scope.getDocStatus().then(function () {\n                    $scope.$watch('status', function () {\n                        if (initStatus) {\n                            $timeout(function () {\n                                initStatus  = false;\n                            });\n                        } else {\n                            $scope.saveStatus();\n                        }\n                    });\n                });\n                $scope.getDocGroup().then(function () {\n                    $scope.$watch('group', function () {\n                        if (initGroup) {\n                            $timeout(function () {\n                                initGroup  = false;\n                            });\n                        } else {\n                            $scope.saveGroup();\n                        }\n                    });\n                });\n                $scope.getDocCategories().then(function () {\n                    $scope.$watch('categories', function () {\n                        if (initCategories) {\n                            $timeout(function () {\n                                initCategories  = false;\n                            });\n                        } else {\n                            $scope.saveCategories();\n                        }\n                    });\n                });\n                $scope.getIntroText();\n                $scope.getDocDates();\n\n                $scope.$watch('doc.title', function () {\n                    if (initTitle) {\n                        $timeout(function () {\n                            initTitle = false;\n                        });\n                    } else {\n                        $scope.saveTitle();\n                    }\n                });\n                $scope.$watch('doc.slug', function () {\n                    if (initSlug) {\n                        $timeout(function () {\n                            initSlug = false;\n                        });\n                    } else {\n                        // Changing doc.slug in-place will trigger the $watch\n                        var safe_slug       = $scope.doc.slug;\n                        var sanitized_slug  = clean_slug(safe_slug);\n                        // If cleaning the slug didn't change anything, we have a valid NEW slug, and we can save it\n                        if (safe_slug == sanitized_slug) {\n                            $scope.saveSlug();\n                        } else {\n                            // Change the slug in-place, which will trigger another watch\n                            // (handled by the POST function)\n                            console.log('Invalid slug, reverting');\n                            $scope.doc.slug = sanitized_slug;\n                        }\n                    }\n                });\n\n                // Save the content every 5 seconds\n                var timeout     = null;\n                $scope.$watch('doc.content.content', function () {\n                    if (initContent) {\n                        $timeout(function () {\n                            initContent = false;\n                        });\n                    } else {\n                        if (timeout) {\n                            $timeout.cancel(timeout);\n                        }\n                        timeout     = $timeout(function () {\n                            $scope.saveContent();\n                        }, 5000);\n                    }\n                });\n            });\n        };\n        /**\n         * getShortUrl\n         *\n         * Makes API call to opngv.us/api\n         * Runs when the 'Get Short Url' button is clicked on the 'Document Information' tab.\n        */\n        $scope.getShortUrl      = function () {\n            /**\n            * Hardcoded API Credentials\n            */\n            var opngv = {\n                username    : 'madison-robot',\n                password    : 'MeV3MJJE',\n                api         : 'http://opngv.us/yourls-api.php'\n            };\n\n            //Construct document url\n            var slug        = $scope.doc.slug;\n            var long_url    = _baseUrl + '/docs/' + slug;\n\n            $http({\n                url     : opngv.api,\n                method  : 'JSONP',\n                params  : {\n                    callback    : 'JSON_CALLBACK',\n                    action      : 'shorturl',\n                    format      : 'jsonp',\n                    url         : long_url,\n                    username    : opngv.username,\n                    password    : opngv.password\n                }\n                }).success(function ( data) {\n                    $scope.short_url    = data.shorturl;\n                }).error(function ( data) {\n                    console.error(data);\n                    growl.error('There was an error generating your short url.');\n                });\n        };\n        $scope.setSelectOptions = function () {\n            $scope.categoryOptions  = {\n                placeholder         : \"Agrega categorías del documento\",\n                multiple            : true,\n                simple_tags         : true,\n                tokenSeparators     : [\",\"],\n                tags                : function () {\n                    return $scope.suggestedCategories;\n                },\n                results             : function () {\n                    return $scope.categories;\n                },\n                initSelection       : function (element, callback) {\n\n                  $scope.categories.splice(0, 1);\n\n                    setTimeout(function(){\n                      var returned    = [];\n\n                      $scope.categories = $.unique( $scope.categories );\n\n                      angular.forEach($scope.categories, function (category, index) {\n                          returned.push(angular.copy({\n                              id      : index,\n                              text    : category\n                          }));\n                      });\n\n                      callback(returned);\n                    }, 2000);\n\n                }\n            };\n\n            /*jslint unparam: true*/\n            $scope.statusOptions    = {\n                placeholder         : 'Select Document Status',\n                allowClear          : true,\n                ajax                : {\n                    url         : _baseUrl + '/api/docs/statuses',\n                    dataType    : 'json',\n                    data        : function (term, page) {\n                        return;\n                    },\n                    results     : function (data, page) {\n                        var returned    = [];\n\n                        angular.forEach(data, function ( status) {\n                            returned.push({\n                                id      : status.id,\n                                text    : status.label\n                            });\n                        });\n                        return {\n                            results     : returned\n                        };\n                    }\n                },\n                data                : function () {\n                    return $scope.suggestedStatuses;\n                },\n                results             : function () {\n                    return $scope.status;\n                },\n                createSearchChoice  : function (term) {\n                    return {\n                        id      : term,\n                        text    : term\n                    };\n                },\n                initSelection       : function (element, callback) {\n                    callback($scope.status);\n                }\n            };\n\n            $scope.groupOptions    = {\n                placeholder         : 'Select Document Group',\n                allowClear          : true,\n                ajax                : {\n                    url         : _baseUrl + '/api/docs/groups',\n                    dataType    : 'json',\n                    data        : function (term, page) {\n                        return;\n                    },\n                    results     : function (data, page) {\n                        var returned    = [];\n\n                        angular.forEach(data, function ( group) {\n                            returned.push({\n                                id      : group.id,\n                                text    : group.name\n                            });\n                        });\n                        return {\n                            results     : returned\n                        };\n                    }\n                },\n                data                : function () {\n                    return $scope.suggestedGroups;\n                },\n                results             : function () {\n                    return $scope.group;\n                },\n                createSearchChoice  : function (term) {\n                    return {\n                        id      : term,\n                        text    : term\n                    };\n                },\n                initSelection       : function (element, callback) {\n                    callback($scope.group);\n                }\n            };\n\n            $scope.sponsorOptions   = {\n                placeholde          : 'Select Document Sponsor',\n                allowClear          : true,\n                ajax                : {\n                    url         : _baseUrl + '/api/user/sponsors/all',\n                    dataType    : 'json',\n                    data        : function () {\n                        return;\n                    },\n                    results     : function ( data) {\n                        var returned = [];\n\n                        if(!data.success) {\n                            alert(data.message);\n                            return;\n                        }\n\n                        angular.forEach(data.sponsors, function (sponsor) {\n                            var text    = \"\";\n\n                            switch(sponsor.sponsorType) {\n                                case 'group':\n                                    text    = \"[Group] \" + sponsor.name;\n                                    break;\n                                case 'user':\n                                    text    = sponsor.fname + \" \" + sponsor.lname + \" - \" + sponsor.email;\n                                    break;\n                            }\n\n                            returned.push({\n                                id      : sponsor.id,\n                                type    : sponsor.sponsorType,\n                                text    : text\n                            });\n                        });\n\n                        return {\n                            results: returned\n                        };\n                    }\n                },\n                initSelection       : function (element, callback) {\n                    callback($scope.sponsor);\n                }\n            };\n            /*jslint unparam: false*/\n        };\n        $scope.statusChange     = function ( status) {\n            $scope.status   = status;\n        };\n        $scope.sponsorChange    = function (sponsor ) {\n            $scope.sponsor  = sponsor;\n        };\n        $scope.groupChange    = function (group ) {\n            $scope.group  = group;\n        };\n        $scope.categoriesChange = function (categories) {\n            $scope.categories   = categories;\n        };\n        $scope.getDoc           = function ( id) {\n            return $http.get(_baseUrl + '/api/docs/' + id)\n                .success(function (data) {\n                    $scope.doc  = data;\n\n                    angular.forEach(data.categories, function (category) {\n                        $scope.categories.push(angular.copy(category.name + ' - ' + category.kind));\n                    });\n            });\n        };\n        $scope.saveTitle        = function () {\n            return $http.post(_baseUrl +  '/api/docs/' + $scope.doc.id + '/title', {\n                'title' : $scope.doc.title\n            })\n                .success(function ( data) {\n                    console.log(\"Title saved successfully: %o\", data);\n                }).error(function ( data) {\n                    console.error(\"Error saving title for document:\", data);\n                });\n        };\n        $scope.saveSlug         = function () {\n            return $http.post(_baseUrl +  '/api/docs/' + $scope.doc.id + '/slug', {\n                'slug'  : $scope.doc.slug\n            })\n                .success(function (data) {\n                    console.log(_baseUrl + \"Slug sent: %o\", data);\n                }).error(function (data) {\n                    console.error(\"Error saving slug for document:\", data);\n                });\n        };\n        $scope.saveContent      = function () {\n            return $http.post(_baseUrl + '/api/docs/' + $scope.doc.id + '/content', {\n                'content'   : $scope.doc.content.content\n            })\n                .success(function ( data) {\n                    console.log(\"Content saved successfully: %o\", data);\n                }).error(function ( data) {\n                    console.error(\"Error saving content for document:\", data);\n                });\n        };\n        $scope.createDate       = function (newDate) {\n            if ($scope.newdate.label !== '') {\n                $scope.newdate.date = $filter('date')(newDate, 'short');\n\n                $http.post(_baseUrl + '/api/docs/' + $scope.doc.id + '/dates', {\n                    date    : $scope.newdate\n                })\n                    .success(function (data) {\n                        data.date       = Date.parse(data.date);\n                        data.$changed   = false;\n                        $scope.dates.push(data);\n\n                        $scope.newdate  = {\n                            label   : '',\n                            date    : new Date()\n                        };\n                    }).error(function (data) {\n                        console.error(\"Unable to save date: %o\", data);\n                    });\n            }\n        };\n        $scope.deleteDate       = function ( date) {\n            $http['delete'](_baseUrl + '/api/docs/' + $scope.doc.id + '/dates/' + date.id)\n                .success(function () {\n                    var index   = $scope.dates.indexOf(date);\n                    $scope.dates.splice(index, 1);\n                }).error(function () {\n                    console.error(\"Unable to delete date: %o\", date);\n                });\n        };\n        $scope.saveDate         = function (date) {\n            var sendDate    = angular.copy(date);\n            sendDate.date   = $filter('date')(sendDate.date, 'short');\n\n            return $http.put(_baseUrl + '/api/dates/' + date.id, {\n                date    : sendDate\n            })\n                .success(function (data) {\n                    date.$changed   = false;\n                    console.log(\"Date saved successfully: %o\", data);\n                }).error(function ( data) {\n                    console.error(\"Unable to save date: %o (%o)\", date, data);\n                });\n        };\n        $scope.getDocDates      = function () {\n            return $http.get(_baseUrl + '/api/docs/' + $scope.doc.id + '/dates')\n                .success(function (data) {\n                    angular.forEach(data, function (date, index) {\n                        date.date       = Date.parse(date.date);\n                        date.$changed   = false;\n                        $scope.dates.push(angular.copy(date));\n\n                        $scope.$watch('dates[' + index + ']', function (newitem, olditem) {\n                            if (!angular.equals(newitem, olditem) && newitem !== undefined) {\n                                newitem.$changed = true;\n                            }\n                        }, true);\n                    });\n                }).error(function (data) {\n                    console.error(\"Error getting dates: %o\", data);\n                });\n        };\n        $scope.getVerifiedUsers = function () {\n            return $http.get(_baseUrl + '/api/user/verify')\n                .success(function ( data) {\n                    angular.forEach(data, function (verified) {\n                        $scope.verifiedUsers.push(angular.copy(verified.user));\n                    });\n                }).error(function (data) {\n                    console.error(\"Unable to get verified users: %o\", data);\n                });\n        };\n        $scope.getDocCategories = function () {\n            return $http.get(_baseUrl + '/api/docs/' + $scope.doc.id + '/categories')\n                .success(function (data) {\n                    angular.forEach(data, function ( category) {\n                        $scope.categories.push(category.name + ' - ' + category.kind);\n                    });\n                }).error(function ( data) {\n                    console.error(\"Unable to get categories for document %o: %o\", $scope.doc, data);\n                });\n        };\n        $scope.getIntroText     = function () {\n            return $http.get(_baseUrl + '/api/docs/' + $scope.doc.id + '/introtext')\n                .success(function ( data) {\n                    $scope.introtext    = data.meta_value;\n                }).error(function ( data) {\n                    console.error(\"Unable to get Intro Text for document %o: %o\", $scope.doc, data);\n                });\n        };\n        $scope.getDocSponsor    = function () {\n            return $http.get(_baseUrl + '/api/docs/' + $scope.doc.id + '/sponsor')\n                .success(function (data) {\n                    if(data.sponsorType === undefined){\n                        $scope.sponsor = null;\n                        return;\n                    }\n\n                    var text = \"\";\n                    switch(data.sponsorType.toLowerCase()) {\n                        case 'group':\n                            text    = \"[Group] \" + data.name;\n                            break;\n                        case 'user':\n                            text    = data.fname + \" \" + data.lname + \" - \" + data.email;\n                            break;\n                    }\n\n                    $scope.sponsor  = {\n                        id      : data.id,\n                        type    :  data.sponsorType.toLowerCase(),\n                        text    : text\n                    };\n                }).error(function (data) {\n                    console.error(\"Error getting document sponsor: %o\", data);\n                });\n        };\n        $scope.getDocGroup     = function () {\n            return $http.get(_baseUrl + '/api/docs/' + $scope.doc.id + '/group')\n                .success(function (data) {\n                    if (data.id === undefined) {\n                        $scope.group = null;\n                    } else {\n                        $scope.group = {\n                            id      : data.id,\n                            text    : data.name\n                        };\n                    }\n                }).error(function ( data) {\n                    console.error(\"Error getting document group: %o\", data);\n                });\n        };\n        $scope.getDocStatus     = function () {\n            return $http.get(_baseUrl + '/api/docs/' + $scope.doc.id + '/status')\n                .success(function (data) {\n                    if (data.id === undefined) {\n                        $scope.status = null;\n                    } else {\n                        $scope.status = {\n                            id      : data.id,\n                            text    : data.label\n                        };\n                    }\n                }).error(function ( data) {\n                    console.error(\"Error getting document status: %o\", data);\n                });\n        };\n        $scope.getAllStatuses   = function () {\n            $http.get(_baseUrl + '/api/docs/statuses')\n                .success(function ( data) {\n                    angular.forEach(data, function ( status) {\n                        $scope.suggestedStatuses.push(status.label);\n                    });\n                }).error(function ( data) {\n                    console.error(\"Unable to get document statuses: %o\", data);\n                });\n        };\n        $scope.getAllGroups   = function () {\n            $http.get(_baseUrl + '/api/docs/groups')\n                .success(function ( data) {\n                    angular.forEach(data, function ( status) {\n                        $scope.suggestedGroups.push(status.label);\n                    });\n                }).error(function ( data) {\n                    console.error(\"Unable to get document groups: %o\", data);\n                });\n        };\n        $scope.getAllCategories = function () {\n            return $http.get(_baseUrl + '/api/docs/categories')\n                .success(function (data) {\n                    angular.forEach(data, function (category) {\n                        $scope.suggestedCategories.push(category.name + ' - ' + category.kind);\n                    });\n                })\n                .error(function (data) {\n                    console.error(\"Unable to get document categories: %o\", data);\n                });\n        };\n        $scope.saveStatus       = function () {\n            return $http.post(_baseUrl + '/api/docs/' + $scope.doc.id + '/status', {\n                status  : $scope.status\n            })\n                .success(function ( data) {\n                    console.log(\"Status saved successfully: %o\", data);\n                }).error(function (data) {\n                    console.error(\"Error saving status: %o\", data);\n                });\n        };\n        $scope.saveGroup       = function () {\n            return $http.post(_baseUrl + '/api/docs/' + $scope.doc.id + '/group', {\n                group  : $scope.group\n            })\n                .success(function ( data) {\n                    console.log(\"Group saved successfully: %o\", data);\n                }).error(function (data) {\n                    console.error(\"Error saving group: %o\", data);\n                });\n        };\n        $scope.saveSponsor      = function () {\n            return $http.post(_baseUrl + '/api/docs/' + $scope.doc.id + '/sponsor', {\n                'sponsor'   : $scope.sponsor\n            })\n                .success(function (data) {\n                    console.log(\"Sponsor saved successfully: %o\", data);\n                }).error(function ( data) {\n                    console.error(\"Error saving sponsor: %o\", data);\n                });\n        };\n        $scope.saveCategories   = function () {\n            return $http.post(_baseUrl + '/api/docs/' + $scope.doc.id + '/categories', {\n                'categories'    : $scope.categories\n            })\n                .success(function (data) {\n                    console.log(\"Categories saved successfully: %o\", data);\n                }).error(function (data) {\n                    console.error(\"Error saving categories for document %o: %o \\n %o\", $scope.doc, $scope.categories, data);\n                });\n        };\n        //Triggered 5 seconds after last change to textarea with ng-model=\"introtext\"\n        $scope.saveIntroText    = function (introtext) {\n            return $http.post(_baseUrl + '/api/docs/' + $scope.doc.id + '/introtext', {\n                'intro-text'    : introtext\n            })\n                .success(function ( data) {\n                    console.log(\"Intro Text saved successfully: %o\", data);\n                }).error(function (data) {\n                    console.error(\"Error saving intro text for document %o: %o\", $scope.doc, $scope.introtext);\n                });\n        };\n    }]);\n","angular.module( 'madisonApp.dashboardControllers' )\n    .controller( 'DashboardSettingsController', [ '$scope', '$http', function ( $scope, $http ) {\n        $scope.admins   = [];\n\n        $scope.getAdmins    = function () {\n            $http.get( '/api/user/admin' )\n                .success( function ( data ) {\n                    $scope.admins   = data;\n                })\n                .error( function ( data ) {\n                    console.error( data );\n                });\n        };\n        $scope.saveAdmin    = function ( admin ) {\n            admin.saved = false;\n\n            $http.post( '/api/user/admin', {\n              'admin'   : admin\n            })\n                .success( function () {\n                    admin.saved = true;\n                })\n                .error( function ( data ) {\n                    console.error( data );\n                });\n        };\n        $scope.init         = function () {\n            $scope.getAdmins();\n        };\n    }]);","angular.module( 'madisonApp.dashboardControllers' )\n    .controller( 'DashbordVerifyController', [ '$scope', '$http', function ( $scope, $http ) {\n        $scope.requests     = [];\n\n        $scope.init         = function () {\n            $scope.getRequests();\n        };\n        $scope.getRequests  = function () {\n            $http.get( '/api/user/verify' )\n                .success( function ( data ) {\n                    $scope.requests = data;\n                })\n                .error( function ( data ) {\n                    console.error( data );\n                });\n        };\n        $scope.update       = function ( request, status ) {\n            $http.post( '/api/user/verify', {\n              'request' : request,\n              'status'  : status\n            })\n                .success( function () {\n                    request.meta_value  = status;\n                })\n                .error( function ( data ) {\n                    console.error( data );\n                });\n        };\n    }]);","angular.module( 'madisonApp.dashboardControllers' )\n    .controller( 'DashboardVerifyGroupController', [ '$scope', '$http', function ( $scope, $http ) {\n        $scope.requests     = [];\n\n        $scope.init         = function() {\n            $scope.getRequests();\n        };\n        $scope.getRequests  = function() {\n            $http.get( '/api/groups/verify' )\n                .success( function( data, status, headers, config ){\n                    $scope.requests = data;\n                })\n                .error( function( data, status, headers, config ){\n                    console.error( data );\n                });\n        };\n        $scope.update       = function( request, status, event ) {\n            $http.post( '/api/groups/verify', {\n                'request'   : request,\n                'status'    : status\n            })\n                .success( function( data ){\n                    request.status  = status;\n                })\n                .error( function( data, status, headers, config ){\n                    console.error( data );\n                });\n        };\n    }]);","angular.module( 'madisonApp.dashboardControllers' )\n    .controller( 'DashboardVerifyUserController', [ '$scope', '$http', function ( $scope, $http ) {\n        $scope.requests = [];\n\n        $scope.init         = function() {\n            $scope.getRequests();\n        };\n        $scope.getRequests  = function() {\n            $http.get( '/api/user/independent/verify' )\n                .success(function( data, status, headers, config ){\n                    $scope.requests = data;\n                })\n                .error( function( data, status, headers, config ){\n                    console.error( data );\n                });\n        };\n        $scope.update       = function( request, status, event ) {\n            $http.post( '/api/user/independent/verify', {\n                'request'   : request,\n                'status'    : status\n            })\n                .success( function( data ){\n                    request.meta_value  = status;\n                    location.reload();\n                })\n                .error( function( data, status, headers, config ){\n                    console.error( data );\n                });\n        };\n    }]);","angular.module('madisonApp.resources')\n    .factory('Doc', ['$resource', function($resource) {\n        return $resource(_baseUrl + \"/api/docs/:id\", null, {\n            query: {\n                method  : 'GET',\n                isArray : false\n            }\n        });\n    }]);\n","angular.module( 'madisonApp.services' )\n    .factory( 'annotationService', [ '$rootScope', '$sce', function ( $rootScope, $sce ) {\n        var annotationService           = {};\n        var converter                   = new Markdown.Converter();\n        annotationService.annotations   = [];\n\n        annotationService.setAnnotations    = function ( annotations ) {\n            angular.forEach(annotations, function ( annotation ) {\n                annotation.html = $sce.trustAsHtml( converter.makeHtml( annotation.text ) );\n                this.annotations.push( annotation );\n            }, this );\n\n            this.broadcastUpdate();\n        };\n        annotationService.addAnnotation     = function ( annotation ) {\n            if ( annotation.id === undefined ) {\n                var interval    = window.setInterval( function () {\n                    this.addAnnotation( annotation );\n                    window.clearInterval( interval );\n                }.bind(this), 500 );\n            } else {\n                annotation.html = $sce.trustAsHtml(converter.makeHtml(annotation.text));\n                this.annotations.push(annotation);\n                this.broadcastUpdate();\n            }\n        };\n        annotationService.broadcastUpdate   = function () {\n            $rootScope.$broadcast( 'annotationsUpdated' );\n        };\n\n        return annotationService;\n    }]);","angular.module('madisonApp.services')\n    .factory('createLoginPopup', ['$document', '$timeout', function ($document, $timeout) {\n        var body            = $document.find('body');\n        var html            = $document.find('html');\n        var attach_handlers = function () {\n            html.on('click.popup', function () {\n                $('.popup').remove();\n                html.off('click.popup');\n            });\n        };\n        var ajaxify_form    = function (inForm, callback) {\n                var form    = $(inForm);\n                form.submit(function (e) {\n                e.preventDefault();\n\n                $.post(form.attr('action'), form.serialize(), function (response) {\n                    if (response.errors && Object.keys(response.errors).length) {\n                        var error_html = $('<ul></ul>');\n\n                        /*jslint unparam:true*/\n                        angular.forEach(response.errors, function (value, key) {\n                            error_html.append('<li>' + value + '</li>');\n                        });\n                        /*jslint unparam:false*/\n\n                        form.find('.errors').html(error_html);\n                    } else {\n                        callback(response);\n                    }\n                });\n            });\n        };\n\n        return function LoginPopup(event) {\n            console.log(event);\n            var popup   = $('<div class=\"popup unauthed-popup\"><p>Por favor regístrate.</p>' +\n                '<input type=\"button\" id=\"login\" value=\"Ingresar\" class=\"btn btn-primary\"/>' +\n                '<input type=\"button\" id=\"signup\" value=\"Registrarse\" class=\"btn btn-primary\" /></div>');\n\n\n            popup.on('click.popup', function ( event) {\n                event.stopPropagation();\n            });\n\n            $('#login', popup).click(function (event) {\n                event.stopPropagation();\n                event.preventDefault();\n\n                $.get(_baseUrl + '/api/auth/login', {}, function (data) {\n                    data    = $(data);\n\n                    ajaxify_form(data.find('form'), function () {\n                        $('html').trigger('click.popup');\n                        location.reload(false);\n                    });\n                    popup.html(data);\n                });\n            });\n            $('#signup', popup).click(function (event) {\n                event.stopPropagation();\n                event.preventDefault();\n\n                $.get(_baseUrl + '/api/auth/signup', {}, function (data) {\n                    data    = $(data);\n\n                    ajaxify_form(data.find('form'), function ( result) {\n                        $('html').trigger('click.popup');\n                        alert(result.message);\n                    });\n\n                    popup.html(data);\n                });\n            });\n            body.append(popup);\n\n            var position    = {\n                'top'   : event.pageY - popup.height(),\n                'left'  : event.clientX\n            };\n            popup.css(position).css('position', 'absolute');\n            popup.css('z-index', '999');\n\n            $timeout(function () {\n                attach_handlers();\n            }, 50);\n        };\n    }]);\n","angular.module( 'madisonApp.services' )\n    .service( 'modalService', [ '$modal', function ( $modal ) {\n        //Set modal defaults\n        var modalDefaults   = {\n            backdrop            : true,\n            keyboard            : true,\n            modalFade           : true,\n            templateUrl         : '/consulta-public/templates/modal.html'\n        };\n        var modalOptions    = {\n            closeButtonText     : 'Close',\n            actionButtonText    : false,\n            headerText          : 'Notice',\n            bodyText            : 'Hmm... someone forgot the content here...'\n        };\n\n        this.showModal  = function ( customModalDefaults, customModalOptions ) {\n            if ( !customModalDefaults ) {\n                customModalDefaults     = {};\n            }\n            //Accepts either true or 'static'.  'static' doesn't close the modal on click.\n            customModalDefaults.backdrop = true;\n\n            return this.show( customModalDefaults, customModalOptions );\n        };\n        this.show       = function ( customModalDefaults, customModalOptions ) {\n            //Create temp objects to work with since we're in a singleton service\n            var tempModalDefaults   = {};\n            var tempModalOptions    = {};\n\n            //Map angular-ui modal custom defaults to modal defaults defined in service\n            angular.extend( tempModalDefaults, modalDefaults, customModalDefaults );\n            //Map modal.html $scope custom properties to defaults defined in service\n            angular.extend( tempModalOptions, modalOptions, customModalOptions );\n\n            if ( !tempModalDefaults.controller ) {\n                tempModalDefaults.controller    = function ( $scope, $modalInstance ) {\n                    $scope.modalOptions         = tempModalOptions;\n                    $scope.modalOptions.ok      = function ( result ) {\n                        $modalInstance.close( result );\n                    };\n                    $scope.modalOptions.close   = function ( result ) {\n                        $modalInstance.dismiss( 'cancel' );\n                    };\n                };\n            }\n\n            return $modal.open( tempModalDefaults ).result;\n        };\n    }]);\n","angular.module('madisonApp.services')\n    .factory('UserService', ['$rootScope', '$http', function ($rootScope, $http) {\n        var UserService  = {};\n        UserService.user = {};\n\n        UserService.getUser = function () {\n            UserService.exists = $http.get(_baseUrl + '/api/user/current')\n                .success(function ( data ) {\n                    UserService.user = data.user;\n                    $rootScope.$broadcast('userUpdated');\n                });\n        };\n\n        return UserService;\n    }]);\n","angular.module( 'madisonApp.directives' )\n    .directive( 'activitySubComment', [ 'growl', '$anchorScroll', '$timeout', function ( growl, $anchorScroll, $timeout ) {\n        return {\n            restrict    : 'A',\n            transclude  : true,\n            templateUrl : '/consulta-public/templates/activity-sub-comment.html',\n            compile     : function () {\n                return {\n                    post: function ( scope, element, attrs ) {\n                        var commentLink = element.find( '.subcomment-link' ).first();\n                        var linkPath    = window.location.origin + window.location.pathname + '#annsubcomment_' + attrs.subCommentId;\n                        $( commentLink ).attr( 'data-clipboard-text', linkPath );\n\n                        var client      = new ZeroClipboard( commentLink );\n                        client.on( 'aftercopy', function ( event ) {\n                            scope.$apply( function () {\n                                growl.success( \"Link copied to clipboard.\" );\n                            });\n                        });\n\n                        $timeout( function () {\n                            $anchorScroll();\n                        }, 0 );\n                    }\n                };\n            }\n        };\n    }]);\n","angular.module( 'madisonApp.directives' )\n    .directive( 'annotationItem', [ 'growl', function ( growl ) {\n        return {\n            restrict    : 'A',\n            transclude  : true,\n            templateUrl : '/consulta-public/templates/annotation-item.html',\n            compile     : function () {\n                return {\n                    post    : function ( scope, element, attrs ) {\n                        var commentLink = element.find( '.comment-link' ).first();\n                        var linkPath    = window.location.origin + window.location.pathname + '#' + attrs.activityItemLink;\n                        $( commentLink ).attr( 'data-clipboard-text', linkPath );\n\n                        var client      = new ZeroClipboard( commentLink );\n                        client.on( 'aftercopy', function ( event ) {\n                            scope.$apply( function () {\n                                growl.success( \"Link copied to clipboard.\" );\n                            });\n                        });\n\n                        var $span       = $( element ).find( '.activity-actions > span.ng-binding' );\n                        $span.on( \"click\", function() {\n                            var $feedbackElement    = $( this ).closest( '.activity-item' );\n                            var prevBackground      = $feedbackElement.css( 'background' );\n                            $feedbackElement.css( \"background\", \"#2276d7\" );\n                            setTimeout( function() {\n                                $feedbackElement.css( \"background\", prevBackground );\n                            }, 500 );\n                        });\n                    }\n                };\n            }\n        };\n    }]);\n","angular.module( 'madisonApp.directives' )\n    .directive( 'commentItem', [ 'growl', function ( growl ) {\n        return {\n            restrict    : 'A',\n            transclude  : true,\n            templateUrl : '/consulta-public/templates/comment-item.html',\n            compile     : function () {\n                return {\n                    post: function ( scope, element, attrs ) {\n                        var commentLink = element.find( '.comment-link' ).first();\n                        var linkPath    = window.location.origin + window.location.pathname + '#' + attrs.activityItemLink;\n                        $( commentLink ).attr( 'data-clipboard-text', linkPath );\n\n                        var client      = new ZeroClipboard( commentLink );\n                        client.on( 'aftercopy', function ( event ) {\n                            scope.$apply( function () {\n                                growl.success( \"Link copied to clipboard.\" );\n                            });\n                        });\n\n                        var $span       = $( element ).find( '.activity-icon > span.ng-binding' );\n                        $span.on( \"click\", function() {\n                            $( element ).parent().effect( \"highlight\",{\n                                color   : \"#2276d7\"\n                            }, 1000 );\n                        });\n                    }\n                };\n            }\n        };\n    }]);\n","angular.module( 'madisonApp.directives' )\n    .directive( 'docComments', function () {\n        return {\n            restrict    : 'AECM',\n            templateUrl : '/consulta-public/templates/doc-comments.html'\n        };\n    });\n","angular.module( 'madisonApp.directives' )\n    .directive( 'docLink', [ '$http', '$compile', function ( $http, $compile ) {\n        return {\n            restrict    : 'AECM',\n            link        : function ( scope, elem, attrs ) {\n                $http.get( '/api/docs/' + attrs.docId )\n                    .success( function ( data ) {\n                        var html    = '<a href=\"/docs/' + data.slug + '\">' + data.title + '</a>';\n                        var e       = $compile( html )( scope );\n                        elem.replaceWith( e );\n                    }).error( function ( data ) {\n                        console.error( \"Unable to retrieve document %o: %o\", attrs.docId, data );\n                    });\n            }\n        };\n    }]);","angular.module( 'madisonApp.directives' )\n    .directive( 'docListItem', function() {\n        return {\n            restrict    : 'A',\n            templateUrl : '/consulta-public/templates/doc-list-item.html'\n        };\n    });\n","angular.module( 'madisonApp.directives' )\n    .directive( 'ngBlur', function () {\n        return function ( scope, elem, attrs ) {\n            elem.bind( 'blur', function () {\n                scope.$apply( attrs.ngBlur );\n            });\n        };\n    });","angular.module( 'madisonApp.directives' )\n    .directive( 'profileCompletionMessage', [ '$http', function ( $http ) {\n        return {\n            restrict    : 'A',\n            templateUrl : '/consulta-public/templates/profile-completion-message.html',\n            link        : function ( scope ) {\n                scope.updateEmail   = function ( newEmail, newPassword ) {\n                    //Issue PUT request to update user\n                    $http.put(_baseUrl + '/api/user/' + scope.user.id + '/edit/email', {\n                        email       : newEmail,\n                        password    : newPassword\n                    })\n                        .success( function () {\n                            //Note: Growl message comes from server response\n                            scope.user.email = newEmail;\n                        }).error( function ( data ) {\n                            console.error( \"Error updating user email: %o\", data );\n                            $('.update-email-error').html(data.messages[0].text);\n                        });\n                };\n            }\n        };\n    }]);\n","angular.module( 'madisonApp.directives' )\n    .directive( 'subcommentLink', [ 'growl', '$anchorScroll', '$timeout', function ( growl, $anchorScroll, $timeout ) {\n        return {\n            restrict    : 'A',\n            template    : '<span class=\"glyphicon glyphicon-link\" title=\"Copy link to clipboard\"></span>',\n            compile     : function () {\n                return {\n                    post    : function ( scope, element, attrs ) {\n                        var commentLink = element;\n                        var linkPath    = window.location.origin + window.location.pathname + '#subcomment_' + attrs.subCommentId;\n                        $( commentLink ).attr( 'data-clipboard-text', linkPath );\n\n                        var client      = new ZeroClipboard( commentLink );\n                        client.on( 'aftercopy', function ( event ) {\n                            scope.$apply( function () {\n                                growl.success( \"Link copied to clipboard.\" );\n                            });\n                        });\n\n                        $timeout( function () {\n                            $anchorScroll();\n                        }, 0 );\n\n                        var $span       = $( element ).closest( '.activity-icon' ).children( 'span.ng-binding' );\n                        $span.on( \"click\", function() {\n                            $( element ).closest( '.activity-reply' ).effect( \"highlight\", {\n                                color   : \"#2276d7\"\n                            }, 1000 );\n                        });\n                    }\n                };\n            }\n        };\n    }]);\n","angular.module( 'madisonApp.filters' )\n    .filter( 'getById', function () {\n        return function ( input, id ) {\n            var i   = 0;\n            var len = input.length;\n            for ( i; i < len; i++ ) {\n                if ( +input[i].id === +id ) {\n                    return input[i];\n                }\n            }\n\n            return null;\n        };\n    });","angular.module( 'madisonApp.filters' )\n    .filter( 'gravatar', function () {\n        return function ( email ) {\n            var hash = '';\n            if ( email !== undefined ) {\n                hash = CryptoJS.MD5( email.toLowerCase() );\n            }\n\n            return hash;\n        };\n    });","angular.module( 'madisonApp.filters' )\n    .filter( 'parseDate', function () {\n        return function ( date ) {\n            return Date.parse( date );\n        };\n    });","angular.module( 'madisonApp.filters' )\n    .filter( 'toArray', function () {\n        return function ( obj ) {\n            if ( !( obj instanceof Object ) ) {\n                return obj;\n            }\n            return _.map( obj, function ( val, key ) {\n                val.$key    = key;\n                return val;\n            });\n        };\n    });","//var angular = require('angular');\n\nwindow.getAnnotationService = function () {\n  var elem = angular.element($('html'));\n  var injector = elem.injector();\n  var annotationService = injector.get('annotationService');\n\n  return annotationService;\n};\n","/*global window*/\nwindow.jQuery = window.$;\n$(function() {\n  // Ajax Setup\n  $.ajaxPrefilter(function(options, originalOptions, jqXHR) {\n      var token;\n      if (! options.crossDomain) {\n          token = $('meta[name=\"token\"]').attr('content');\n          if (token) {\n              jqXHR.setRequestHeader('X-CSRF-Token', token);\n          }\n      }\n\n      return jqXHR;\n  });\n});\n\nvar imports = [\n    'madisonApp.filters',\n    'madisonApp.services',\n    'madisonApp.resources',\n    'madisonApp.directives',\n    'madisonApp.controllers',\n    'madisonApp.dashboardControllers',\n    'ui',\n    'ui.bootstrap',\n    'ui.bootstrap.datetimepicker',\n    'ui.bootstrap.pagination',\n    'ui.select',\n    'ngAnimate',\n    'ngCookies',\n    'ngSanitize',\n    'angular-growl',\n    'ngResource',\n    'ngRoute',\n    'ipCookie',\n    'pascalprecht.translate'\n  ];\n\nmoment.locale('es');\n\nvar app = angular.module('madisonApp', imports);\n\n// Add a prefix to all http calls\n// app.config(function ($httpProvider) {\n//   $httpProvider.interceptors.push(function ($q) {\n//     return {\n//       request: function (request) {\n//         var doNotPrefix = [\n//           'subcomment_renderer.html',\n//           'template/',\n//           'tour/'\n//         ];\n//         var shouldWeAvoidPrefix = function(element, index) {\n//           return request.url.indexOf(element) > -1;\n//         };\n//\n//         if ($.grep(doNotPrefix, shouldWeAvoidPrefix).length > 0) {\n//           // templates included in angular-bootstrap\n//           // e.g. angular.module(\"template/tabs/tabset.html\",[])\n//           // or defined as ng-templates\n//         } else if (request.url.indexOf(\"templates/\") < 0) {\n//           request.url = \"/consulta/\" + request.url;\n//           request.url = request.url.replace(/\\/\\//g, \"/\");\n//         } else {\n//           request.url = \"/\" + request.url;\n//           request.url = request.url.replace(/\\/\\//g, \"/\");\n//         }\n//         return request || $q.when(request);\n//       }\n//     };\n//   });\n// });\n\napp.config(['growlProvider', '$httpProvider', function (growlProvider, $httpProvider) {\n    //Set up growl notifications\n    growlProvider.messagesKey(\"messages\");\n    growlProvider.messageTextKey(\"text\");\n    growlProvider.messageSeverityKey(\"severity\");\n    growlProvider.onlyUniqueMessages(true);\n    growlProvider.globalTimeToLive(5000);\n}]);\n\napp.config(function ($locationProvider) {\n  $locationProvider.html5Mode(true);\n});\n\napp.config(['$translateProvider', function ($translateProvider) {\n  // $translateProvider.useSanitizeValueStrategy('sanitize');\n\n  $translateProvider.translations('en', {\n    'POSTED': 'Posted',\n    'UPDATED': 'Updated'\n  });\n\n  $translateProvider.translations('es', {\n    'POSTED': 'Publicación',\n    'UPDATED': 'Última actualización'\n  });\n\n  $translateProvider.preferredLanguage('es');\n}]);\n\nwindow.console = window.console || {};\nwindow.console.log = window.console.log || function () {};\n"],"sourceRoot":"/source/"}